<?php
/**
* Smarty Internal Plugin Templateparser
*
* This is the template parser.
* It is generated from the internal.templateparser.y file
* @package Smarty
* @subpackage Compiler
* @author Uwe Tews
*/

/**
 * This can be used to store both the string representation of
 * a token, and any useful meta-data associated with the token.
 *
 * meta-data should be stored as an array
 */
class TP_yyToken implements ArrayAccess
{
    public $string = '';
    public $metadata = array();

    function __construct($s, $m = array())
    {
        if ($s instanceof TP_yyToken) {
            $this->string = $s->string;
            $this->metadata = $s->metadata;
        } else {
            $this->string = (string) $s;
            if ($m instanceof TP_yyToken) {
                $this->metadata = $m->metadata;
            } elseif (is_array($m)) {
                $this->metadata = $m;
            }
        }
    }

    function __toString()
    {
        return $this->_string;
    }

    function offsetExists($offset)
    {
        return isset($this->metadata[$offset]);
    }

    function offsetGet($offset)
    {
        return $this->metadata[$offset];
    }

    function offsetSet($offset, $value)
    {
        if ($offset === null) {
            if (isset($value[0])) {
                $x = ($value instanceof TP_yyToken) ?
                    $value->metadata : $value;
                $this->metadata = array_merge($this->metadata, $x);
                return;
            }
            $offset = count($this->metadata);
        }
        if ($value === null) {
            return;
        }
        if ($value instanceof TP_yyToken) {
            if ($value->metadata) {
                $this->metadata[$offset] = $value->metadata;
            }
        } elseif ($value) {
            $this->metadata[$offset] = $value;
        }
    }

    function offsetUnset($offset)
    {
        unset($this->metadata[$offset]);
    }
}

/** The following structure represents a single element of the
 * parser's stack.  Information stored includes:
 *
 *   +  The state number for the parser at this level of the stack.
 *
 *   +  The value of the token stored at this level of the stack.
 *      (In other words, the "major" token.)
 *
 *   +  The semantic value stored at this level of the stack.  This is
 *      the information used by the action routines in the grammar.
 *      It is sometimes called the "minor" token.
 */
class TP_yyStackEntry
{
    public $stateno;       /* The state-number */
    public $major;         /* The major token value.  This is the code
                     ** number for the token at this stack level */
    public $minor; /* The user-supplied minor token value.  This
                     ** is the value of the token  */
};

// code external to the class is included here

// declare_class is output here
#line 12 "smarty_internal_templateparser.y"
class Smarty_Internal_Templateparser#line 109 "smarty_internal_templateparser.php"
{
/* First off, code is included which follows the "include_class" declaration
** in the input file. */
#line 14 "smarty_internal_templateparser.y"

    // states whether the parse was successful or not
    public $successful = true;
    public $retvalue = 0;
    private $lex;
    private $internalError = false;

    function __construct($lex, $compiler) {
        // set instance object
        self::instance($this); 
        $this->lex = $lex;
        $this->compiler = $compiler;
        $this->smarty = $this->compiler->smarty;
        $this->template = $this->compiler->template;
        if ($this->template->security && isset($this->smarty->security_handler)) {
              $this->sec_obj = $this->smarty->security_policy;
        } else {
              $this->sec_obj = $this->smarty;
        }
        $this->cacher = $this->template->cacher_object; 
        $this->compiler->has_variable_string = false;
				$this->compiler->prefix_code = array();
				$this->prefix_number = 0;
    }
    public static function &instance($new_instance = null)
    {
        static $instance = null;
        if (isset($new_instance) && is_object($new_instance))
            $instance = $new_instance;
        return $instance;
    }
    
#line 147 "smarty_internal_templateparser.php"

/* Next is all token values, as class constants
*/
/* 
** These constants (all generated automatically by the parser generator)
** specify the various kinds of tokens (terminals) that the parser
** understands. 
**
** Each symbol here is a terminal symbol in the grammar.
*/
    const TP_OTHER                          =  1;
    const TP_XML                            =  2;
    const TP_PHP                            =  3;
    const TP_SHORTTAGSTART                  =  4;
    const TP_SHORTTAGEND                    =  5;
    const TP_PHPSTART                       =  6;
    const TP_PHPEND                         =  7;
    const TP_COMMENT                        =  8;
    const TP_SINGLEQUOTE                    =  9;
    const TP_LITERALSTART                   = 10;
    const TP_LITERALEND                     = 11;
    const TP_LDELIMTAG                      = 12;
    const TP_RDELIMTAG                      = 13;
    const TP_LDELSLASH                      = 14;
    const TP_LDEL                           = 15;
    const TP_RDEL                           = 16;
    const TP_ISIN                           = 17;
    const TP_AS                             = 18;
    const TP_BOOLEAN                        = 19;
    const TP_NULL                           = 20;
    const TP_IDENTITY                       = 21;
    const TP_NONEIDENTITY                   = 22;
    const TP_EQUALS                         = 23;
    const TP_NOTEQUALS                      = 24;
    const TP_GREATEREQUAL                   = 25;
    const TP_LESSEQUAL                      = 26;
    const TP_GREATERTHAN                    = 27;
    const TP_LESSTHAN                       = 28;
    const TP_MOD                            = 29;
    const TP_NOT                            = 30;
    const TP_LAND                           = 31;
    const TP_LOR                            = 32;
    const TP_LXOR                           = 33;
    const TP_ISODDBY                        = 34;
    const TP_ISNOTODDBY                     = 35;
    const TP_ISODD                          = 36;
    const TP_ISNOTODD                       = 37;
    const TP_ISEVENBY                       = 38;
    const TP_ISNOTEVENBY                    = 39;
    const TP_ISEVEN                         = 40;
    const TP_ISNOTEVEN                      = 41;
    const TP_ISDIVBY                        = 42;
    const TP_ISNOTDIVBY                     = 43;
    const TP_OPENP                          = 44;
    const TP_CLOSEP                         = 45;
    const TP_OPENB                          = 46;
    const TP_CLOSEB                         = 47;
    const TP_PTR                            = 48;
    const TP_APTR                           = 49;
    const TP_EQUAL                          = 50;
    const TP_INTEGER                        = 51;
    const TP_INCDEC                         = 52;
    const TP_UNIMATH                        = 53;
    const TP_MATH                           = 54;
    const TP_DOLLAR                         = 55;
    const TP_COLON                          = 56;
    const TP_DOUBLECOLON                    = 57;
    const TP_SEMICOLON                      = 58;
    const TP_AT                             = 59;
    const TP_HATCH                          = 60;
    const TP_QUOTE                          = 61;
    const TP_BACKTICK                       = 62;
    const TP_VERT                           = 63;
    const TP_DOT                            = 64;
    const TP_COMMA                          = 65;
    const TP_ANDSYM                         = 66;
    const TP_ID                             = 67;
    const TP_SPACE                          = 68;
    const TP_INSTANCEOF                     = 69;
    const TP_QMARK                          = 70;
    const YY_NO_ACTION = 483;
    const YY_ACCEPT_ACTION = 482;
    const YY_ERROR_ACTION = 481;

/* Next are that tables used to determine what action to take based on the
** current state and lookahead token.  These tables are used to implement
** functions that take a state number and lookahead value and return an
** action integer.  
**
** Suppose the action integer is N.  Then the action is determined as
** follows
**
**   0 <= N < self::YYNSTATE                              Shift N.  That is,
**                                                        push the lookahead
**                                                        token onto the stack
**                                                        and goto state N.
**
**   self::YYNSTATE <= N < self::YYNSTATE+self::YYNRULE   Reduce by rule N-YYNSTATE.
**
**   N == self::YYNSTATE+self::YYNRULE                    A syntax error has occurred.
**
**   N == self::YYNSTATE+self::YYNRULE+1                  The parser accepts its
**                                                        input. (and concludes parsing)
**
**   N == self::YYNSTATE+self::YYNRULE+2                  No such action.  Denotes unused
**                                                        slots in the yy_action[] table.
**
** The action table is constructed as a single large static array $yy_action.
** Given state S and lookahead X, the action is computed as
**
**      self::$yy_action[self::$yy_shift_ofst[S] + X ]
**
** If the index value self::$yy_shift_ofst[S]+X is out of range or if the value
** self::$yy_lookahead[self::$yy_shift_ofst[S]+X] is not equal to X or if
** self::$yy_shift_ofst[S] is equal to self::YY_SHIFT_USE_DFLT, it means that
** the action is not in the table and that self::$yy_default[S] should be used instead.  
**
** The formula above is for computing the action when the lookahead is
** a terminal symbol.  If the lookahead is a non-terminal (as occurs after
** a reduce action) then the static $yy_reduce_ofst array is used in place of
** the static $yy_shift_ofst array and self::YY_REDUCE_USE_DFLT is used in place of
** self::YY_SHIFT_USE_DFLT.
**
** The following are the tables generated in this section:
**
**  self::$yy_action        A single table containing all actions.
**  self::$yy_lookahead     A table containing the lookahead for each entry in
**                          yy_action.  Used to detect hash collisions.
**  self::$yy_shift_ofst    For each state, the offset into self::$yy_action for
**                          shifting terminals.
**  self::$yy_reduce_ofst   For each state, the offset into self::$yy_action for
**                          shifting non-terminals after a reduce.
**  self::$yy_default       Default action for each state.
*/
    const YY_SZ_ACTTAB = 1073;
static public $yy_action = array(
 /*     0 */   225,  221,  249,    3,    5,  216,  215,    7,    9,  255,
 /*    10 */   252,   11,   12,  347,  225,  221,  249,    3,    5,  216,
 /*    20 */   215,    7,    9,  255,  252,   11,   12,  203,  169,  225,
 /*    30 */   221,  249,    3,    5,  216,  215,    7,    9,  255,  252,
 /*    40 */    11,   12,   63,  288,  105,   63,   25,  278,   71,  214,
 /*    50 */   197,   71,  207,  209,   78,  207,  209,  239,  242,  186,
 /*    60 */   188,  241,  237,   10,  253,  184,   73,  208,  235,  234,
 /*    70 */   128,    2,   18,  219,  161,  289,   20,   13,  277,   14,
 /*    80 */    34,   31,   14,  287,  198,  112,   40,  198,   69,   40,
 /*    90 */   194,   68,  171,   47,   58,  123,   47,   58,  274,  148,
 /*   100 */   164,  130,   51,  154,  220,  119,  227,   25,  261,  225,
 /*   110 */   221,  249,    3,    5,  216,  215,    7,    9,  255,  252,
 /*   120 */    11,   12,  304,   27,  139,  161,   18,   63,  297,  227,
 /*   130 */    63,   23,  127,   71,  281,  282,   71,  207,  209,  112,
 /*   140 */   207,  209,   33,  151,  279,   39,  201,  283,   10,  246,
 /*   150 */   245,  230,  217,  250,  231,  206,  211,  232,  351,  274,
 /*   160 */   265,  161,   13,   68,   14,   34,    1,   14,   47,  198,
 /*   170 */   116,   40,  198,   64,   40,  110,   69,   36,   47,   58,
 /*   180 */    29,   47,   58,   63,  305,  153,   18,  161,   45,   71,
 /*   190 */   161,  161,   22,  207,  209,   44,   39,   25,   15,  112,
 /*   200 */   246,  245,  230,  217,  250,  231,  206,  211,  232,  152,
 /*   210 */   351,   63,  238,  147,   68,   25,   37,   71,   34,   47,
 /*   220 */    14,  207,  209,  298,  172,  198,  170,   40,  150,   69,
 /*   230 */   161,  302,   78,   35,   47,   58,   30,  306,  163,  103,
 /*   240 */   298,  164,  161,   61,  309,   46,   34,  229,   14,  173,
 /*   250 */   236,  219,  295,  198,  306,   40,   68,   68,  276,  194,
 /*   260 */   161,   47,   47,   58,  233,   19,   39,  274,  258,  157,
 /*   270 */   246,  245,  230,  217,  250,  231,  206,  211,  232,   63,
 /*   280 */    54,  175,   63,  197,   43,   71,   16,   78,   71,  207,
 /*   290 */   209,  298,  207,  209,  238,  226,  294,  133,   97,  291,
 /*   300 */   208,  149,  482,   94,  240,  306,  219,  281,  282,  138,
 /*   310 */   261,    6,  161,  152,    4,   32,   14,   34,  142,   14,
 /*   320 */   283,  198,  261,   40,  198,   69,   40,   59,   68,  161,
 /*   330 */    47,   58,   42,   47,   58,   63,   25,  164,   63,  182,
 /*   340 */   165,   71,  276,   18,   71,  207,  209,  201,  207,  209,
 /*   350 */   179,  197,  178,  111,  161,   78,  112,  307,  199,  184,
 /*   360 */   280,  243,  161,  226,  294,   25,  102,    1,  208,  262,
 /*   370 */    34,  180,   14,    4,  219,   14,   98,  198,   18,   40,
 /*   380 */   198,   69,   40,  278,   69,   80,   47,   58,  274,   47,
 /*   390 */    58,  112,   63,  155,  281,  282,   45,  197,   71,   57,
 /*   400 */    31,   78,  207,  209,   93,  204,  158,  283,   24,  159,
 /*   410 */   176,  303,  102,  259,  208,  161,  301,  274,  193,  134,
 /*   420 */   219,   38,  129,  152,  197,  299,   57,   34,   78,   14,
 /*   430 */   195,   89,  261,  184,  198,  261,  202,  294,   68,  102,
 /*   440 */    36,  208,   43,   47,   58,  305,  114,  219,  257,  185,
 /*   450 */   165,  183,  299,   62,  137,   52,   76,   67,   44,   15,
 /*   460 */   197,  276,   55,  161,   78,  226,  294,   82,  102,  187,
 /*   470 */   208,  118,  202,  294,   63,  102,  219,  208,  197,  264,
 /*   480 */    71,  125,   78,  219,  207,  209,  276,   63,  299,  349,
 /*   490 */   228,  310,  269,   71,  261,  208,   60,  207,  209,  163,
 /*   500 */   197,  219,   57,  247,   78,  285,   46,   92,  146,   34,
 /*   510 */    21,  276,  202,  294,  296,  102,  198,  208,   78,  161,
 /*   520 */    68,  261,   34,  219,  184,   47,   58,  166,  299,  198,
 /*   530 */   141,   78,  165,   68,  257,  101,   95,  219,   47,   58,
 /*   540 */   197,  349,   57,  261,   78,  160,  124,   85,   22,  161,
 /*   550 */   219,  308,  202,  294,  197,  102,   56,  208,   78,  261,
 /*   560 */   167,   84,   70,  219,   78,  184,  202,  294,  299,  102,
 /*   570 */   303,  208,  152,   68,   50,  197,  144,  219,   47,   78,
 /*   580 */    66,  227,  299,  219,  197,  181,   57,  292,   78,  132,
 /*   590 */   100,   87,  208,   43,  227,  276,  202,  294,  219,  102,
 /*   600 */   136,  208,  197,  273,   57,  276,   78,  219,  218,   83,
 /*   610 */    72,  224,  299,  261,  202,  294,  174,  102,   16,  208,
 /*   620 */   197,  275,  109,  222,   78,  219,   26,  197,  168,   57,
 /*   630 */   299,   78,  226,  294,   86,  102,   75,  208,   19,  202,
 /*   640 */   294,  196,  102,  219,  208,  214,  298,  272,  210,  177,
 /*   650 */   219,  162,  267,   65,  223,  299,  300,  197,  266,   57,
 /*   660 */   306,   78,  251,   74,   88,   48,  336,  260,  191,  202,
 /*   670 */   294,  197,  102,   57,  208,   78,  263,  270,   90,  286,
 /*   680 */   219,   42,  248,  202,  294,  299,  102,   28,  208,  197,
 /*   690 */   254,   57,   77,   78,  219,  293,   91,  256,  189,  299,
 /*   700 */    41,  202,  294,  220,  102,   81,  208,  197,  278,  111,
 /*   710 */   244,   78,  219,   17,  120,  290,  286,  299,  284,  226,
 /*   720 */   294,   49,  102,    8,  208,  190,  257,  205,   38,  286,
 /*   730 */   219,  197,  286,  109,  286,   78,  286,  286,  286,  286,
 /*   740 */   286,  286,  286,  226,  294,  286,  102,  286,  208,  197,
 /*   750 */   286,  111,  286,   78,  219,  286,  286,  286,  286,  286,
 /*   760 */   286,  226,  294,  268,  102,  286,  208,  286,  286,  271,
 /*   770 */   286,  197,  219,  111,  286,   78,  286,  286,  286,  286,
 /*   780 */   286,  286,  286,  226,  294,  286,  102,  286,  208,  286,
 /*   790 */   286,  192,  286,  286,  219,  286,  286,  197,  286,   53,
 /*   800 */    79,   78,  286,  286,  197,  286,  104,  200,   78,  226,
 /*   810 */   294,  197,  102,  117,  208,   67,  226,  294,  286,  102,
 /*   820 */   219,  208,  286,  226,  294,  286,  102,  219,  208,  197,
 /*   830 */   286,  126,  213,   78,  219,  286,  286,  286,  286,  286,
 /*   840 */   286,  156,  294,  197,  102,  106,  208,   78,  286,  286,
 /*   850 */   286,  286,  219,  286,  286,  226,  294,  286,  102,  286,
 /*   860 */   208,  286,  286,  197,  286,  115,  219,   78,  286,  286,
 /*   870 */   286,  286,  286,  286,  286,  226,  294,  197,  102,  108,
 /*   880 */   208,   78,  286,  286,  286,  286,  219,  286,  286,  226,
 /*   890 */   294,  197,  102,  135,  208,   78,  286,  286,  286,  286,
 /*   900 */   219,  286,  286,  226,  294,  286,  102,  197,  208,  121,
 /*   910 */   286,   78,  286,  286,  219,  286,  286,  286,  286,  226,
 /*   920 */   294,  197,  102,  140,  208,   78,  286,  286,  286,  286,
 /*   930 */   219,  286,  286,  226,  294,  197,  102,  113,  208,   78,
 /*   940 */   286,  286,  286,  286,  219,  286,  286,  226,  294,  286,
 /*   950 */   102,  286,  208,  286,  286,  197,  286,  131,  219,   78,
 /*   960 */   286,  286,  286,  286,  286,  286,  286,  226,  294,  197,
 /*   970 */   102,  122,  208,   78,  286,  286,  286,  286,  219,  286,
 /*   980 */   286,  226,  294,  197,  102,  145,  208,   78,  286,  286,
 /*   990 */   286,  286,  219,  286,  286,  226,  294,  286,  102,  197,
 /*  1000 */   208,  143,  286,   78,  286,  286,  219,  286,  286,  286,
 /*  1010 */   286,  226,  294,  197,  102,  107,  208,   78,  286,  286,
 /*  1020 */   286,  286,  219,  286,  286,  226,  294,  197,  102,  286,
 /*  1030 */   208,   78,  286,  286,  286,  286,  219,  286,  286,  226,
 /*  1040 */   294,  286,   99,  286,  208,  286,  286,  197,  286,  197,
 /*  1050 */   219,   78,  286,   78,  286,  286,  286,  286,  286,  226,
 /*  1060 */   294,  212,   96,  286,  208,  286,  208,  286,  286,  286,
 /*  1070 */   219,  286,  219,
    );
    static public $yy_lookahead = array(
 /*     0 */    31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
 /*    10 */    41,   42,   43,   16,   31,   32,   33,   34,   35,   36,
 /*    20 */    37,   38,   39,   40,   41,   42,   43,   58,   45,   31,
 /*    30 */    32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
 /*    40 */    42,   43,    9,   45,  101,    9,   15,  104,   15,   52,
 /*    50 */    79,   15,   19,   20,   83,   19,   20,    1,    2,    3,
 /*    60 */     4,    5,   91,   30,    8,   68,   10,   96,   12,   13,
 /*    70 */    14,   15,   44,  102,   63,   47,   65,   44,   16,   46,
 /*    80 */    44,   50,   46,   47,   51,   57,   53,   51,   55,   53,
 /*    90 */    59,   55,   64,   60,   61,   80,   60,   61,   67,   84,
 /*   100 */    67,  100,   85,   67,  103,  101,  105,   15,   93,   31,
 /*   110 */    32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
 /*   120 */    42,   43,    1,   15,  100,   63,   44,    9,   47,  105,
 /*   130 */     9,   49,   85,   15,   53,   54,   15,   19,   20,   57,
 /*   140 */    19,   20,   50,   16,   52,   17,   48,   66,   30,   21,
 /*   150 */    22,   23,   24,   25,   26,   27,   28,   29,   16,   67,
 /*   160 */     1,   63,   44,   55,   46,   44,   68,   46,   60,   51,
 /*   170 */   101,   53,   51,   55,   53,   67,   55,   46,   60,   61,
 /*   180 */    56,   60,   61,    9,    1,   67,   44,   63,   67,   15,
 /*   190 */    63,   63,   50,   19,   20,   64,   17,   15,   15,   57,
 /*   200 */    21,   22,   23,   24,   25,   26,   27,   28,   29,   84,
 /*   210 */    68,    9,   45,   16,   55,   15,   15,   15,   44,   60,
 /*   220 */    46,   19,   20,    1,   45,   51,   67,   53,   79,   55,
 /*   230 */    63,    9,   83,  108,   60,   61,   15,   15,   55,  101,
 /*   240 */     1,   67,   63,   89,   61,   62,   44,   98,   46,   67,
 /*   250 */    11,  102,   51,   51,   15,   53,   55,   55,  104,   59,
 /*   260 */    63,   60,   60,   61,    5,   44,   17,   67,   67,   67,
 /*   270 */    21,   22,   23,   24,   25,   26,   27,   28,   29,    9,
 /*   280 */    85,   18,    9,   79,   48,   15,   50,   83,   15,   19,
 /*   290 */    20,    1,   19,   20,   45,   91,   92,   80,   94,    9,
 /*   300 */    96,   84,   72,   73,   74,   15,  102,   53,   54,   80,
 /*   310 */    93,   58,   63,   84,   44,   49,   46,   44,   65,   46,
 /*   320 */    66,   51,   93,   53,   51,   55,   53,   89,   55,   63,
 /*   330 */    60,   61,   69,   60,   61,    9,   15,   67,    9,   48,
 /*   340 */    67,   15,  104,   44,   15,   19,   20,   48,   19,   20,
 /*   350 */    75,   79,   59,   81,   63,   83,   57,   16,   83,   68,
 /*   360 */    67,    5,   63,   91,   92,   15,   94,   68,   96,   90,
 /*   370 */    44,   99,   46,   44,  102,   46,   78,   51,   44,   53,
 /*   380 */    51,   55,   53,  104,   55,   45,   60,   61,   67,   60,
 /*   390 */    61,   57,    9,   67,   53,   54,   67,   79,   15,   81,
 /*   400 */    50,   83,   19,   20,   86,   87,   88,   66,   56,   91,
 /*   410 */    92,  113,   94,    1,   96,   63,   16,   67,   55,   80,
 /*   420 */   102,   56,   80,   84,   79,  107,   81,   44,   83,   46,
 /*   430 */    67,   86,   93,   68,   51,   93,   91,   92,   55,   94,
 /*   440 */    46,   96,   48,   60,   61,    1,   89,  102,  106,   75,
 /*   450 */    67,   77,  107,   79,   67,   81,   82,   83,   64,   15,
 /*   460 */    79,  104,   81,   63,   83,   91,   92,   86,   94,    1,
 /*   470 */    96,   89,   91,   92,    9,   94,  102,   96,   79,   67,
 /*   480 */    15,   80,   83,  102,   19,   20,  104,    9,  107,   16,
 /*   490 */    91,   92,   47,   15,   93,   96,   89,   19,   20,   55,
 /*   500 */    79,  102,   81,   93,   83,   61,   62,   86,   80,   44,
 /*   510 */    65,  104,   91,   92,   79,   94,   51,   96,   83,   63,
 /*   520 */    55,   93,   44,  102,   68,   60,   61,   79,  107,   51,
 /*   530 */    80,   83,   67,   55,  106,   78,   97,  102,   60,   61,
 /*   540 */    79,   68,   81,   93,   83,   67,   80,   86,   50,   63,
 /*   550 */   102,  112,   91,   92,   79,   94,   81,   96,   83,   93,
 /*   560 */    79,   86,   55,  102,   83,   68,   91,   92,  107,   94,
 /*   570 */   113,   96,   84,   55,   67,   79,  100,  102,   60,   83,
 /*   580 */    89,  105,  107,  102,   79,   67,   81,   91,   83,  100,
 /*   590 */    89,   86,   96,   48,  105,  104,   91,   92,  102,   94,
 /*   600 */    80,   96,   79,   87,   81,  104,   83,  102,  105,   86,
 /*   610 */    55,   67,  107,   93,   91,   92,   56,   94,   50,   96,
 /*   620 */    79,   67,   81,   60,   83,  102,   70,   79,   67,   81,
 /*   630 */   107,   83,   91,   92,   86,   94,   55,   96,   44,   91,
 /*   640 */    92,   64,   94,  102,   96,   52,    1,   67,   51,   18,
 /*   650 */   102,  110,  111,   55,   45,  107,   16,   79,   62,   81,
 /*   660 */    15,   83,   16,   55,   86,  101,   16,   45,   67,   91,
 /*   670 */    92,   79,   94,   81,   96,   83,   16,   62,   86,   47,
 /*   680 */   102,   69,   16,   91,   92,  107,   94,   70,   96,   79,
 /*   690 */    67,   81,   67,   83,  102,   60,   86,   16,    1,  107,
 /*   700 */    95,   91,   92,  103,   94,   98,   96,   79,  104,   81,
 /*   710 */    74,   83,  102,   44,  101,  113,  114,  107,  112,   91,
 /*   720 */    92,   67,   94,  109,   96,   76,  106,   99,   56,  114,
 /*   730 */   102,   79,  114,   81,  114,   83,  114,  114,  114,  114,
 /*   740 */   114,  114,  114,   91,   92,  114,   94,  114,   96,   79,
 /*   750 */   114,   81,  114,   83,  102,  114,  114,  114,  114,  114,
 /*   760 */   114,   91,   92,  111,   94,  114,   96,  114,  114,   99,
 /*   770 */   114,   79,  102,   81,  114,   83,  114,  114,  114,  114,
 /*   780 */   114,  114,  114,   91,   92,  114,   94,  114,   96,  114,
 /*   790 */   114,   99,  114,  114,  102,  114,  114,   79,  114,   81,
 /*   800 */    82,   83,  114,  114,   79,  114,   81,   75,   83,   91,
 /*   810 */    92,   79,   94,   81,   96,   83,   91,   92,  114,   94,
 /*   820 */   102,   96,  114,   91,   92,  114,   94,  102,   96,   79,
 /*   830 */   114,   81,   82,   83,  102,  114,  114,  114,  114,  114,
 /*   840 */   114,   91,   92,   79,   94,   81,   96,   83,  114,  114,
 /*   850 */   114,  114,  102,  114,  114,   91,   92,  114,   94,  114,
 /*   860 */    96,  114,  114,   79,  114,   81,  102,   83,  114,  114,
 /*   870 */   114,  114,  114,  114,  114,   91,   92,   79,   94,   81,
 /*   880 */    96,   83,  114,  114,  114,  114,  102,  114,  114,   91,
 /*   890 */    92,   79,   94,   81,   96,   83,  114,  114,  114,  114,
 /*   900 */   102,  114,  114,   91,   92,  114,   94,   79,   96,   81,
 /*   910 */   114,   83,  114,  114,  102,  114,  114,  114,  114,   91,
 /*   920 */    92,   79,   94,   81,   96,   83,  114,  114,  114,  114,
 /*   930 */   102,  114,  114,   91,   92,   79,   94,   81,   96,   83,
 /*   940 */   114,  114,  114,  114,  102,  114,  114,   91,   92,  114,
 /*   950 */    94,  114,   96,  114,  114,   79,  114,   81,  102,   83,
 /*   960 */   114,  114,  114,  114,  114,  114,  114,   91,   92,   79,
 /*   970 */    94,   81,   96,   83,  114,  114,  114,  114,  102,  114,
 /*   980 */   114,   91,   92,   79,   94,   81,   96,   83,  114,  114,
 /*   990 */   114,  114,  102,  114,  114,   91,   92,  114,   94,   79,
 /*  1000 */    96,   81,  114,   83,  114,  114,  102,  114,  114,  114,
 /*  1010 */   114,   91,   92,   79,   94,   81,   96,   83,  114,  114,
 /*  1020 */   114,  114,  102,  114,  114,   91,   92,   79,   94,  114,
 /*  1030 */    96,   83,  114,  114,  114,  114,  102,  114,  114,   91,
 /*  1040 */    92,  114,   94,  114,   96,  114,  114,   79,  114,   79,
 /*  1050 */   102,   83,  114,   83,  114,  114,  114,  114,  114,   91,
 /*  1060 */    92,   91,   94,  114,   96,  114,   96,  114,  114,  114,
 /*  1070 */   102,  114,  102,
);
    const YY_SHIFT_USE_DFLT = -32;
    const YY_SHIFT_MAX = 205;
    static public $yy_shift_ofst = array(
 /*     0 */    56,  118,  329,   33,   33,   33,   33,   33,   33,   33,
 /*    10 */    33,   33,   33,   33,  326,  121,  270,  174,  174,  174,
 /*    20 */   174,  326,  270,  174,  174,  174,  174,  174,  174,  174,
 /*    30 */   174,  174,  174,  174,  174,  174,   36,  273,  202,  383,
 /*    40 */   465,  465,  478,  108,  201,  299,  159,  518,  394,  291,
 /*    50 */    98,  365,  456,  456,  365,  249,  179,  128,  183,   31,
 /*    60 */    92,  200,   -3,  222,  182,  321,  321,  236,  321,  182,
 /*    70 */   321,  507,  321,  645,  321,  321,  497,  497,  545,  497,
 /*    80 */   545,  545,   -2,  -31,  -17,   78,   78,   78,   78,   78,
 /*    90 */    78,   78,   78,   78,   56,  444,   81,  341,  290,  254,
 /*   100 */   350,  239,  254,  131,  124,  131,   62,  167,  127,  266,
 /*   110 */   221,   11,  363,  197,  321,  352,  131,  400,  321,  131,
 /*   120 */   131,  486,  486,  497,  497,  497,  486,  672,  654,  497,
 /*   130 */   545,  486,  545,  497,  497,  486,  497,  669,  497,  545,
 /*   140 */   486,  497,  555,  486,  545,  486,  497,  -32,  -32,  -32,
 /*   150 */   -32,  -32,  -32,  142,   28,   82,  473,  334,  253,  263,
 /*   160 */   334,  293,  445,  412,  334,  334,  615,  635,  632,  617,
 /*   170 */   596,  561,  556,  560,  554,  581,  631,  598,  580,  660,
 /*   180 */   609,  563,  623,  646,  601,  681,  697,  356,  468,  259,
 /*   190 */   666,  498,  340,  387,  544,  594,  597,  593,  577,  568,
 /*   200 */   640,  625,  612,  608,  650,  622,
);
    const YY_REDUCE_USE_DFLT = -58;
    const YY_REDUCE_MAX = 152;
    static public $yy_reduce_ofst = array(
 /*     0 */   230,  318,  374,  505,  475,  461,  523,  421,  592,  578,
 /*    10 */   548,  610,  345,  381,  541,  732,  718,  692,  628,  272,
 /*    20 */   670,  652,  750,  890,  876,  764,  725,  856,  784,  842,
 /*    30 */   798,  812,  828,  904,  934,  920,  968,  204,  948,  399,
 /*    40 */   970,  496,  -29,  149,  435,  217,  448,  481,    1,   15,
 /*    50 */   217,  342,  339,  229,  428,  125,  125,  125,  439,  -57,
 /*    60 */   279,  -57,  401,  298,  238,  357,  -57,   24,  154,  154,
 /*    70 */   491,  275,  501,  457,  407,  382,  466,  450,   24,  520,
 /*    80 */   476,  489,  614,  614,  614,  614,  614,  614,  614,  614,
 /*    90 */   614,  614,  614,  614,  636,  606,  605,  605,  602,  605,
 /*   100 */   604,  602,  605,  600,  488,  600,  488,  488,  488,  488,
 /*   110 */   613,  488,  607,  488,  604,  488,  600,  488,  604,  600,
 /*   120 */   600,  488,  488,  410,  410,  410,  488,  620,  649,  410,
 /*   130 */   503,  488,  503,  410,  410,  488,  410,  564,  410,  503,
 /*   140 */   488,  410,  516,  488,  503,  488,  410,  138,   17,  195,
 /*   150 */     4,   69,   47,
);
    static public $yyExpectedTokens = array(
        /* 0 */ array(1, 2, 3, 4, 5, 8, 10, 12, 13, 14, 15, ),
        /* 1 */ array(9, 15, 19, 20, 30, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 2 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 3 */ array(9, 15, 19, 20, 30, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 4 */ array(9, 15, 19, 20, 30, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 5 */ array(9, 15, 19, 20, 30, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 6 */ array(9, 15, 19, 20, 30, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 7 */ array(9, 15, 19, 20, 30, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 8 */ array(9, 15, 19, 20, 30, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 9 */ array(9, 15, 19, 20, 30, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 10 */ array(9, 15, 19, 20, 30, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 11 */ array(9, 15, 19, 20, 30, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 12 */ array(9, 15, 19, 20, 30, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 13 */ array(9, 15, 19, 20, 30, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 14 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 15 */ array(1, 9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 16 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 17 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 18 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 19 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 20 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 21 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 22 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 23 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 24 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 25 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 26 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 27 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 28 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 29 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 30 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 31 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 32 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 33 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 34 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 35 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 36 */ array(9, 15, 19, 20, 44, 46, 47, 51, 53, 55, 60, 61, 67, ),
        /* 37 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 38 */ array(9, 15, 19, 20, 44, 46, 51, 53, 55, 60, 61, 67, ),
        /* 39 */ array(9, 15, 19, 20, 44, 46, 51, 55, 60, 61, 67, ),
        /* 40 */ array(9, 15, 19, 20, 44, 51, 55, 60, 61, 67, ),
        /* 41 */ array(9, 15, 19, 20, 44, 51, 55, 60, 61, 67, ),
        /* 42 */ array(9, 15, 19, 20, 44, 51, 55, 60, 61, 67, ),
        /* 43 */ array(15, 55, 60, 67, ),
        /* 44 */ array(15, 51, 55, 60, 67, ),
        /* 45 */ array(44, 48, 57, 63, 68, ),
        /* 46 */ array(1, 55, 60, 67, ),
        /* 47 */ array(55, 60, 67, ),
        /* 48 */ array(46, 48, 64, ),
        /* 49 */ array(48, 63, 68, ),
        /* 50 */ array(48, 63, 68, ),
        /* 51 */ array(56, 68, ),
        /* 52 */ array(63, 68, ),
        /* 53 */ array(63, 68, ),
        /* 54 */ array(56, 68, ),
        /* 55 */ array(17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 45, 63, ),
        /* 56 */ array(17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 45, 63, ),
        /* 57 */ array(17, 21, 22, 23, 24, 25, 26, 27, 28, 29, 63, ),
        /* 58 */ array(1, 15, 55, 61, 62, ),
        /* 59 */ array(15, 50, 59, 67, ),
        /* 60 */ array(15, 50, 52, 67, ),
        /* 61 */ array(15, 59, 67, ),
        /* 62 */ array(16, 52, 68, ),
        /* 63 */ array(1, 9, 15, ),
        /* 64 */ array(15, 67, ),
        /* 65 */ array(15, 67, ),
        /* 66 */ array(15, 67, ),
        /* 67 */ array(48, 50, ),
        /* 68 */ array(15, 67, ),
        /* 69 */ array(15, 67, ),
        /* 70 */ array(15, 67, ),
        /* 71 */ array(55, 67, ),
        /* 72 */ array(15, 67, ),
        /* 73 */ array(1, 15, ),
        /* 74 */ array(15, 67, ),
        /* 75 */ array(15, 67, ),
        /* 76 */ array(68, ),
        /* 77 */ array(68, ),
        /* 78 */ array(48, ),
        /* 79 */ array(68, ),
        /* 80 */ array(48, ),
        /* 81 */ array(48, ),
        /* 82 */ array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, ),
        /* 83 */ array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 58, ),
        /* 84 */ array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, ),
        /* 85 */ array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, ),
        /* 86 */ array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, ),
        /* 87 */ array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, ),
        /* 88 */ array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, ),
        /* 89 */ array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, ),
        /* 90 */ array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, ),
        /* 91 */ array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, ),
        /* 92 */ array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, ),
        /* 93 */ array(31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, ),
        /* 94 */ array(1, 2, 3, 4, 5, 8, 10, 12, 13, 14, 15, ),
        /* 95 */ array(1, 15, 55, 61, 62, ),
        /* 96 */ array(47, 53, 54, 66, ),
        /* 97 */ array(16, 53, 54, 66, ),
        /* 98 */ array(1, 9, 15, ),
        /* 99 */ array(53, 54, 66, ),
        /* 100 */ array(15, 50, 67, ),
        /* 101 */ array(1, 11, 15, ),
        /* 102 */ array(53, 54, 66, ),
        /* 103 */ array(46, 64, ),
        /* 104 */ array(56, 63, ),
        /* 105 */ array(46, 64, ),
        /* 106 */ array(16, 63, ),
        /* 107 */ array(45, 63, ),
        /* 108 */ array(16, 63, ),
        /* 109 */ array(49, 63, ),
        /* 110 */ array(15, 44, ),
        /* 111 */ array(63, 65, ),
        /* 112 */ array(55, 67, ),
        /* 113 */ array(16, 63, ),
        /* 114 */ array(15, 67, ),
        /* 115 */ array(56, 63, ),
        /* 116 */ array(46, 64, ),
        /* 117 */ array(16, 63, ),
        /* 118 */ array(15, 67, ),
        /* 119 */ array(46, 64, ),
        /* 120 */ array(46, 64, ),
        /* 121 */ array(63, ),
        /* 122 */ array(63, ),
        /* 123 */ array(68, ),
        /* 124 */ array(68, ),
        /* 125 */ array(68, ),
        /* 126 */ array(63, ),
        /* 127 */ array(56, ),
        /* 128 */ array(67, ),
        /* 129 */ array(68, ),
        /* 130 */ array(48, ),
        /* 131 */ array(63, ),
        /* 132 */ array(48, ),
        /* 133 */ array(68, ),
        /* 134 */ array(68, ),
        /* 135 */ array(63, ),
        /* 136 */ array(68, ),
        /* 137 */ array(44, ),
        /* 138 */ array(68, ),
        /* 139 */ array(48, ),
        /* 140 */ array(63, ),
        /* 141 */ array(68, ),
        /* 142 */ array(55, ),
        /* 143 */ array(63, ),
        /* 144 */ array(48, ),
        /* 145 */ array(63, ),
        /* 146 */ array(68, ),
        /* 147 */ array(),
        /* 148 */ array(),
        /* 149 */ array(),
        /* 150 */ array(),
        /* 151 */ array(),
        /* 152 */ array(),
        /* 153 */ array(16, 44, 50, 57, 68, ),
        /* 154 */ array(44, 47, 57, 64, ),
        /* 155 */ array(44, 49, 57, ),
        /* 156 */ array(16, 68, ),
        /* 157 */ array(44, 57, ),
        /* 158 */ array(58, 65, ),
        /* 159 */ array(18, 69, ),
        /* 160 */ array(44, 57, ),
        /* 161 */ array(59, 67, ),
        /* 162 */ array(47, 65, ),
        /* 163 */ array(1, 67, ),
        /* 164 */ array(44, 57, ),
        /* 165 */ array(44, 57, ),
        /* 166 */ array(62, ),
        /* 167 */ array(60, ),
        /* 168 */ array(47, ),
        /* 169 */ array(70, ),
        /* 170 */ array(62, ),
        /* 171 */ array(67, ),
        /* 172 */ array(70, ),
        /* 173 */ array(56, ),
        /* 174 */ array(67, ),
        /* 175 */ array(55, ),
        /* 176 */ array(18, ),
        /* 177 */ array(55, ),
        /* 178 */ array(67, ),
        /* 179 */ array(16, ),
        /* 180 */ array(45, ),
        /* 181 */ array(60, ),
        /* 182 */ array(67, ),
        /* 183 */ array(16, ),
        /* 184 */ array(67, ),
        /* 185 */ array(16, ),
        /* 186 */ array(1, ),
        /* 187 */ array(5, ),
        /* 188 */ array(1, ),
        /* 189 */ array(5, ),
        /* 190 */ array(16, ),
        /* 191 */ array(50, ),
        /* 192 */ array(45, ),
        /* 193 */ array(67, ),
        /* 194 */ array(67, ),
        /* 195 */ array(44, ),
        /* 196 */ array(51, ),
        /* 197 */ array(52, ),
        /* 198 */ array(64, ),
        /* 199 */ array(50, ),
        /* 200 */ array(16, ),
        /* 201 */ array(67, ),
        /* 202 */ array(69, ),
        /* 203 */ array(55, ),
        /* 204 */ array(16, ),
        /* 205 */ array(45, ),
        /* 206 */ array(),
        /* 207 */ array(),
        /* 208 */ array(),
        /* 209 */ array(),
        /* 210 */ array(),
        /* 211 */ array(),
        /* 212 */ array(),
        /* 213 */ array(),
        /* 214 */ array(),
        /* 215 */ array(),
        /* 216 */ array(),
        /* 217 */ array(),
        /* 218 */ array(),
        /* 219 */ array(),
        /* 220 */ array(),
        /* 221 */ array(),
        /* 222 */ array(),
        /* 223 */ array(),
        /* 224 */ array(),
        /* 225 */ array(),
        /* 226 */ array(),
        /* 227 */ array(),
        /* 228 */ array(),
        /* 229 */ array(),
        /* 230 */ array(),
        /* 231 */ array(),
        /* 232 */ array(),
        /* 233 */ array(),
        /* 234 */ array(),
        /* 235 */ array(),
        /* 236 */ array(),
        /* 237 */ array(),
        /* 238 */ array(),
        /* 239 */ array(),
        /* 240 */ array(),
        /* 241 */ array(),
        /* 242 */ array(),
        /* 243 */ array(),
        /* 244 */ array(),
        /* 245 */ array(),
        /* 246 */ array(),
        /* 247 */ array(),
        /* 248 */ array(),
        /* 249 */ array(),
        /* 250 */ array(),
        /* 251 */ array(),
        /* 252 */ array(),
        /* 253 */ array(),
        /* 254 */ array(),
        /* 255 */ array(),
        /* 256 */ array(),
        /* 257 */ array(),
        /* 258 */ array(),
        /* 259 */ array(),
        /* 260 */ array(),
        /* 261 */ array(),
        /* 262 */ array(),
        /* 263 */ array(),
        /* 264 */ array(),
        /* 265 */ array(),
        /* 266 */ array(),
        /* 267 */ array(),
        /* 268 */ array(),
        /* 269 */ array(),
        /* 270 */ array(),
        /* 271 */ array(),
        /* 272 */ array(),
        /* 273 */ array(),
        /* 274 */ array(),
        /* 275 */ array(),
        /* 276 */ array(),
        /* 277 */ array(),
        /* 278 */ array(),
        /* 279 */ array(),
        /* 280 */ array(),
        /* 281 */ array(),
        /* 282 */ array(),
        /* 283 */ array(),
        /* 284 */ array(),
        /* 285 */ array(),
        /* 286 */ array(),
        /* 287 */ array(),
        /* 288 */ array(),
        /* 289 */ array(),
        /* 290 */ array(),
        /* 291 */ array(),
        /* 292 */ array(),
        /* 293 */ array(),
        /* 294 */ array(),
        /* 295 */ array(),
        /* 296 */ array(),
        /* 297 */ array(),
        /* 298 */ array(),
        /* 299 */ array(),
        /* 300 */ array(),
        /* 301 */ array(),
        /* 302 */ array(),
        /* 303 */ array(),
        /* 304 */ array(),
        /* 305 */ array(),
        /* 306 */ array(),
        /* 307 */ array(),
        /* 308 */ array(),
        /* 309 */ array(),
        /* 310 */ array(),
);
    static public $yy_default = array(
 /*     0 */   481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
 /*    10 */   481,  481,  481,  481,  462,  481,  481,  420,  420,  420,
 /*    20 */   420,  481,  481,  481,  481,  481,  481,  481,  481,  481,
 /*    30 */   481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
 /*    40 */   481,  481,  481,  481,  481,  332,  481,  481,  385,  347,
 /*    50 */   332,  347,  347,  347,  347,  430,  430,  430,  481,  395,
 /*    60 */   481,  395,  368,  481,  481,  481,  395,  388,  481,  481,
 /*    70 */   481,  481,  481,  481,  481,  481,  347,  347,  388,  347,
 /*    80 */   381,  380,  481,  481,  481,  444,  428,  443,  440,  436,
 /*    90 */   434,  435,  439,  335,  311,  481,  481,  481,  481,  425,
 /*   100 */   481,  481,  356,  413,  481,  393,  481,  481,  481,  465,
 /*   110 */   395,  419,  481,  481,  341,  481,  414,  481,  340,  412,
 /*   120 */   411,  463,  464,  342,  328,  326,  348,  358,  481,  343,
 /*   130 */   386,  363,  382,  331,  327,  354,  330,  395,  329,  408,
 /*   140 */   364,  333,  481,  431,  383,  338,  334,  395,  424,  424,
 /*   150 */   395,  395,  424,  355,  481,  355,  359,  426,  481,  359,
 /*   160 */   445,  481,  481,  481,  355,  481,  481,  481,  481,  481,
 /*   170 */   481,  481,  375,  406,  481,  481,  362,  481,  481,  481,
 /*   180 */   481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
 /*   190 */   481,  351,  481,  481,  481,  384,  481,  368,  370,  481,
 /*   200 */   481,  481,  359,  481,  352,  481,  449,  372,  374,  373,
 /*   210 */   371,  450,  360,  350,  369,  442,  441,  448,  410,  390,
 /*   220 */   394,  457,  391,  417,  389,  456,  359,  409,  433,  415,
 /*   230 */   447,  452,  455,  321,  320,  319,  318,  446,  375,  325,
 /*   240 */   312,  324,  323,  322,  313,  454,  453,  345,  315,  458,
 /*   250 */   451,  316,  438,  317,  344,  437,  314,  423,  396,  473,
 /*   260 */   416,  346,  337,  387,  470,  475,  468,  460,  461,  459,
 /*   270 */   469,  418,  421,  353,  406,  357,  404,  407,  405,  339,
 /*   280 */   422,  365,  366,  367,  466,  378,  401,  403,  429,  400,
 /*   290 */   477,  376,  361,  392,  362,  397,  398,  402,  479,  427,
 /*   300 */   472,  471,  377,  478,  474,  476,  480,  399,  467,  379,
 /*   310 */   432,
);
/* The next thing included is series of defines which control
** various aspects of the generated parser.
**    self::YYNOCODE      is a number which corresponds
**                        to no legal terminal or nonterminal number.  This
**                        number is used to fill in empty slots of the hash 
**                        table.
**    self::YYFALLBACK    If defined, this indicates that one or more tokens
**                        have fall-back values which should be used if the
**                        original value of the token will not parse.
**    self::YYSTACKDEPTH  is the maximum depth of the parser's stack.
**    self::YYNSTATE      the combined number of states.
**    self::YYNRULE       the number of rules in the grammar
**    self::YYERRORSYMBOL is the code number of the error symbol.  If not
**                        defined, then do no error processing.
*/
    const YYNOCODE = 115;
    const YYSTACKDEPTH = 100;
    const YYNSTATE = 311;
    const YYNRULE = 170;
    const YYERRORSYMBOL = 71;
    const YYERRSYMDT = 'yy0';
    const YYFALLBACK = 1;
    /** The next table maps tokens into fallback tokens.  If a construct
     * like the following:
     * 
     *      %fallback ID X Y Z.
     *
     * appears in the grammer, then ID becomes a fallback token for X, Y,
     * and Z.  Whenever one of the tokens X, Y, or Z is input to the parser
     * but it does not parse, the type of the token is changed to ID and
     * the parse is retried before an error is thrown.
     */
    static public $yyFallback = array(
    0,  /*          $ => nothing */
    0,  /*      OTHER => nothing */
    1,  /*        XML => OTHER */
    1,  /*        PHP => OTHER */
    1,  /* SHORTTAGSTART => OTHER */
    1,  /* SHORTTAGEND => OTHER */
    1,  /*   PHPSTART => OTHER */
    1,  /*     PHPEND => OTHER */
    1,  /*    COMMENT => OTHER */
    1,  /* SINGLEQUOTE => OTHER */
    1,  /* LITERALSTART => OTHER */
    1,  /* LITERALEND => OTHER */
    1,  /*  LDELIMTAG => OTHER */
    1,  /*  RDELIMTAG => OTHER */
    1,  /*  LDELSLASH => OTHER */
    1,  /*       LDEL => OTHER */
    1,  /*       RDEL => OTHER */
    1,  /*       ISIN => OTHER */
    1,  /*         AS => OTHER */
    1,  /*    BOOLEAN => OTHER */
    1,  /*       NULL => OTHER */
    1,  /*   IDENTITY => OTHER */
    1,  /* NONEIDENTITY => OTHER */
    1,  /*     EQUALS => OTHER */
    1,  /*  NOTEQUALS => OTHER */
    1,  /* GREATEREQUAL => OTHER */
    1,  /*  LESSEQUAL => OTHER */
    1,  /* GREATERTHAN => OTHER */
    1,  /*   LESSTHAN => OTHER */
    1,  /*        MOD => OTHER */
    1,  /*        NOT => OTHER */
    1,  /*       LAND => OTHER */
    1,  /*        LOR => OTHER */
    1,  /*       LXOR => OTHER */
    1,  /*    ISODDBY => OTHER */
    1,  /* ISNOTODDBY => OTHER */
    1,  /*      ISODD => OTHER */
    1,  /*   ISNOTODD => OTHER */
    1,  /*   ISEVENBY => OTHER */
    1,  /* ISNOTEVENBY => OTHER */
    1,  /*     ISEVEN => OTHER */
    1,  /*  ISNOTEVEN => OTHER */
    1,  /*    ISDIVBY => OTHER */
    1,  /* ISNOTDIVBY => OTHER */
    1,  /*      OPENP => OTHER */
    1,  /*     CLOSEP => OTHER */
    1,  /*      OPENB => OTHER */
    1,  /*     CLOSEB => OTHER */
    1,  /*        PTR => OTHER */
    1,  /*       APTR => OTHER */
    1,  /*      EQUAL => OTHER */
    1,  /*    INTEGER => OTHER */
    1,  /*     INCDEC => OTHER */
    1,  /*    UNIMATH => OTHER */
    1,  /*       MATH => OTHER */
    1,  /*     DOLLAR => OTHER */
    1,  /*      COLON => OTHER */
    1,  /* DOUBLECOLON => OTHER */
    1,  /*  SEMICOLON => OTHER */
    1,  /*         AT => OTHER */
    1,  /*      HATCH => OTHER */
    1,  /*      QUOTE => OTHER */
    1,  /*   BACKTICK => OTHER */
    1,  /*       VERT => OTHER */
    1,  /*        DOT => OTHER */
    1,  /*      COMMA => OTHER */
    1,  /*     ANDSYM => OTHER */
    1,  /*         ID => OTHER */
    1,  /*      SPACE => OTHER */
    1,  /* INSTANCEOF => OTHER */
    1,  /*      QMARK => OTHER */
    );
    /**
     * Turn parser tracing on by giving a stream to which to write the trace
     * and a prompt to preface each trace message.  Tracing is turned off
     * by making either argument NULL 
     *
     * Inputs:
     * 
     * - A stream resource to which trace output should be written.
     *   If NULL, then tracing is turned off.
     * - A prefix string written at the beginning of every
     *   line of trace output.  If NULL, then tracing is
     *   turned off.
     *
     * Outputs:
     * 
     * - None.
     * @param resource
     * @param string
     */
    static function Trace($TraceFILE, $zTracePrompt)
    {
        if (!$TraceFILE) {
            $zTracePrompt = 0;
        } elseif (!$zTracePrompt) {
            $TraceFILE = 0;
        }
        self::$yyTraceFILE = $TraceFILE;
        self::$yyTracePrompt = $zTracePrompt;
    }

    /**
     * Output debug information to output (php://output stream)
     */
    static function PrintTrace()
    {
        self::$yyTraceFILE = fopen('php://output', 'w');
        self::$yyTracePrompt = '<br>';
    }

    /**
     * @var resource|0
     */
    static public $yyTraceFILE;
    /**
     * String to prepend to debug output
     * @var string|0
     */
    static public $yyTracePrompt;
    /**
     * @var int
     */
    public $yyidx;                    /* Index of top element in stack */
    /**
     * @var int
     */
    public $yyerrcnt;                 /* Shifts left before out of the error */
    /**
     * @var array
     */
    public $yystack = array();  /* The parser's stack */

    /**
     * For tracing shifts, the names of all terminals and nonterminals
     * are required.  The following table supplies these names
     * @var array
     */
    public $yyTokenName = array( 
  '$',             'OTHER',         'XML',           'PHP',         
  'SHORTTAGSTART',  'SHORTTAGEND',   'PHPSTART',      'PHPEND',      
  'COMMENT',       'SINGLEQUOTE',   'LITERALSTART',  'LITERALEND',  
  'LDELIMTAG',     'RDELIMTAG',     'LDELSLASH',     'LDEL',        
  'RDEL',          'ISIN',          'AS',            'BOOLEAN',     
  'NULL',          'IDENTITY',      'NONEIDENTITY',  'EQUALS',      
  'NOTEQUALS',     'GREATEREQUAL',  'LESSEQUAL',     'GREATERTHAN', 
  'LESSTHAN',      'MOD',           'NOT',           'LAND',        
  'LOR',           'LXOR',          'ISODDBY',       'ISNOTODDBY',  
  'ISODD',         'ISNOTODD',      'ISEVENBY',      'ISNOTEVENBY', 
  'ISEVEN',        'ISNOTEVEN',     'ISDIVBY',       'ISNOTDIVBY',  
  'OPENP',         'CLOSEP',        'OPENB',         'CLOSEB',      
  'PTR',           'APTR',          'EQUAL',         'INTEGER',     
  'INCDEC',        'UNIMATH',       'MATH',          'DOLLAR',      
  'COLON',         'DOUBLECOLON',   'SEMICOLON',     'AT',          
  'HATCH',         'QUOTE',         'BACKTICK',      'VERT',        
  'DOT',           'COMMA',         'ANDSYM',        'ID',          
  'SPACE',         'INSTANCEOF',    'QMARK',         'error',       
  'start',         'template',      'template_element',  'smartytag',   
  'smartyclosetag',  'outputtag',     'text',          'variable',    
  'attributes',    'expr',          'ternary',       'varindexed',  
  'modifier',      'modparameters',  'ifexprs',       'statement',   
  'statements',    'varvar',        'foraction',     'value',       
  'array',         'attribute',     'exprs',         'math',        
  'function',      'doublequoted',  'method',        'params',      
  'objectchain',   'arrayindex',    'object',        'indexdef',    
  'varvarele',     'objectelement',  'modparameter',  'ifexpr',      
  'ifcond',        'lop',           'arrayelements',  'arrayelement',
  'doublequotedcontent',  'textelement', 
    );

    /**
     * For tracing reduce actions, the names of all rules are required.
     * @var array
     */
    static public $yyRuleName = array(
 /*   0 */ "start ::= template",
 /*   1 */ "template ::= template_element",
 /*   2 */ "template ::= template template_element",
 /*   3 */ "template_element ::= LDEL smartytag RDEL",
 /*   4 */ "template_element ::= LDELSLASH smartyclosetag RDEL",
 /*   5 */ "template_element ::= LDEL outputtag RDEL",
 /*   6 */ "template_element ::= COMMENT",
 /*   7 */ "template_element ::= LITERALSTART text LITERALEND",
 /*   8 */ "template_element ::= LDELIMTAG",
 /*   9 */ "template_element ::= RDELIMTAG",
 /*  10 */ "template_element ::= PHP OTHER SHORTTAGEND",
 /*  11 */ "template_element ::= SHORTTAGSTART OTHER SHORTTAGEND",
 /*  12 */ "template_element ::= XML",
 /*  13 */ "template_element ::= SHORTTAGEND",
 /*  14 */ "template_element ::= OTHER",
 /*  15 */ "outputtag ::= variable attributes",
 /*  16 */ "outputtag ::= expr attributes",
 /*  17 */ "outputtag ::= ternary attributes",
 /*  18 */ "smartytag ::= varindexed EQUAL expr attributes",
 /*  19 */ "smartytag ::= varindexed EQUAL ternary attributes",
 /*  20 */ "smartytag ::= ID attributes",
 /*  21 */ "smartytag ::= ID",
 /*  22 */ "smartytag ::= ID PTR ID attributes",
 /*  23 */ "smartytag ::= ID modifier modparameters attributes",
 /*  24 */ "smartytag ::= ID SPACE ifexprs",
 /*  25 */ "smartytag ::= ID SPACE statement",
 /*  26 */ "smartytag ::= ID SPACE statements SEMICOLON ifexprs SEMICOLON DOLLAR varvar foraction",
 /*  27 */ "foraction ::= EQUAL expr",
 /*  28 */ "foraction ::= INCDEC",
 /*  29 */ "smartytag ::= ID SPACE value AS DOLLAR varvar",
 /*  30 */ "smartytag ::= ID SPACE array AS DOLLAR varvar",
 /*  31 */ "smartyclosetag ::= ID attributes",
 /*  32 */ "smartyclosetag ::= ID modifier modparameters attributes",
 /*  33 */ "smartyclosetag ::= ID PTR ID",
 /*  34 */ "attributes ::= attributes attribute",
 /*  35 */ "attributes ::= attribute",
 /*  36 */ "attributes ::=",
 /*  37 */ "attribute ::= SPACE ID EQUAL expr",
 /*  38 */ "attribute ::= SPACE ID EQUAL value",
 /*  39 */ "attribute ::= SPACE ID EQUAL ternary",
 /*  40 */ "attribute ::= SPACE ID",
 /*  41 */ "statements ::= statement",
 /*  42 */ "statements ::= statements COMMA statement",
 /*  43 */ "statement ::= DOLLAR varvar EQUAL expr",
 /*  44 */ "expr ::= ID",
 /*  45 */ "expr ::= exprs",
 /*  46 */ "expr ::= DOLLAR ID COLON ID",
 /*  47 */ "expr ::= expr modifier modparameters",
 /*  48 */ "exprs ::= value",
 /*  49 */ "exprs ::= UNIMATH value",
 /*  50 */ "exprs ::= exprs math value",
 /*  51 */ "exprs ::= array",
 /*  52 */ "ternary ::= OPENP ifexprs CLOSEP QMARK expr COLON expr",
 /*  53 */ "ternary ::= OPENP expr CLOSEP QMARK expr COLON expr",
 /*  54 */ "math ::= UNIMATH",
 /*  55 */ "math ::= MATH",
 /*  56 */ "math ::= ANDSYM",
 /*  57 */ "value ::= variable",
 /*  58 */ "value ::= variable INCDEC",
 /*  59 */ "value ::= INTEGER",
 /*  60 */ "value ::= INTEGER DOT INTEGER",
 /*  61 */ "value ::= BOOLEAN",
 /*  62 */ "value ::= NULL",
 /*  63 */ "value ::= function",
 /*  64 */ "value ::= OPENP expr CLOSEP",
 /*  65 */ "value ::= SINGLEQUOTE text SINGLEQUOTE",
 /*  66 */ "value ::= SINGLEQUOTE SINGLEQUOTE",
 /*  67 */ "value ::= QUOTE doublequoted QUOTE",
 /*  68 */ "value ::= QUOTE QUOTE",
 /*  69 */ "value ::= ID DOUBLECOLON method",
 /*  70 */ "value ::= ID DOUBLECOLON DOLLAR ID OPENP params CLOSEP",
 /*  71 */ "value ::= ID DOUBLECOLON method objectchain",
 /*  72 */ "value ::= ID DOUBLECOLON DOLLAR ID OPENP params CLOSEP objectchain",
 /*  73 */ "value ::= ID DOUBLECOLON ID",
 /*  74 */ "value ::= ID DOUBLECOLON DOLLAR ID arrayindex",
 /*  75 */ "value ::= ID DOUBLECOLON DOLLAR ID arrayindex objectchain",
 /*  76 */ "value ::= LDEL smartytag RDEL",
 /*  77 */ "variable ::= varindexed",
 /*  78 */ "variable ::= DOLLAR varvar AT ID",
 /*  79 */ "variable ::= object",
 /*  80 */ "variable ::= HATCH ID HATCH",
 /*  81 */ "variable ::= HATCH variable HATCH",
 /*  82 */ "varindexed ::= DOLLAR varvar arrayindex",
 /*  83 */ "arrayindex ::= arrayindex indexdef",
 /*  84 */ "arrayindex ::=",
 /*  85 */ "indexdef ::= DOT ID",
 /*  86 */ "indexdef ::= DOT INTEGER",
 /*  87 */ "indexdef ::= DOT variable",
 /*  88 */ "indexdef ::= DOT LDEL exprs RDEL",
 /*  89 */ "indexdef ::= OPENB ID CLOSEB",
 /*  90 */ "indexdef ::= OPENB ID DOT ID CLOSEB",
 /*  91 */ "indexdef ::= OPENB exprs CLOSEB",
 /*  92 */ "indexdef ::= OPENB CLOSEB",
 /*  93 */ "varvar ::= varvarele",
 /*  94 */ "varvar ::= varvar varvarele",
 /*  95 */ "varvarele ::= ID",
 /*  96 */ "varvarele ::= LDEL expr RDEL",
 /*  97 */ "object ::= varindexed objectchain",
 /*  98 */ "objectchain ::= objectelement",
 /*  99 */ "objectchain ::= objectchain objectelement",
 /* 100 */ "objectelement ::= PTR ID arrayindex",
 /* 101 */ "objectelement ::= PTR variable arrayindex",
 /* 102 */ "objectelement ::= PTR LDEL expr RDEL arrayindex",
 /* 103 */ "objectelement ::= PTR ID LDEL expr RDEL arrayindex",
 /* 104 */ "objectelement ::= PTR method",
 /* 105 */ "function ::= ID OPENP params CLOSEP",
 /* 106 */ "method ::= ID OPENP params CLOSEP",
 /* 107 */ "params ::= expr COMMA params",
 /* 108 */ "params ::= expr",
 /* 109 */ "params ::=",
 /* 110 */ "modifier ::= VERT AT ID",
 /* 111 */ "modifier ::= VERT ID",
 /* 112 */ "modparameters ::= modparameters modparameter",
 /* 113 */ "modparameters ::=",
 /* 114 */ "modparameter ::= COLON exprs",
 /* 115 */ "modparameter ::= COLON ID",
 /* 116 */ "ifexprs ::= ifexpr",
 /* 117 */ "ifexprs ::= NOT ifexprs",
 /* 118 */ "ifexprs ::= OPENP ifexprs CLOSEP",
 /* 119 */ "ifexpr ::= expr",
 /* 120 */ "ifexpr ::= expr ifcond expr",
 /* 121 */ "ifexpr ::= expr ISIN array",
 /* 122 */ "ifexpr ::= expr ISIN value",
 /* 123 */ "ifexpr ::= ifexprs lop ifexprs",
 /* 124 */ "ifexpr ::= ifexprs ISDIVBY ifexprs",
 /* 125 */ "ifexpr ::= ifexprs ISNOTDIVBY ifexprs",
 /* 126 */ "ifexpr ::= ifexprs ISEVEN",
 /* 127 */ "ifexpr ::= ifexprs ISNOTEVEN",
 /* 128 */ "ifexpr ::= ifexprs ISEVENBY ifexprs",
 /* 129 */ "ifexpr ::= ifexprs ISNOTEVENBY ifexprs",
 /* 130 */ "ifexpr ::= ifexprs ISODD",
 /* 131 */ "ifexpr ::= ifexprs ISNOTODD",
 /* 132 */ "ifexpr ::= ifexprs ISODDBY ifexprs",
 /* 133 */ "ifexpr ::= ifexprs ISNOTODDBY ifexprs",
 /* 134 */ "ifexpr ::= value INSTANCEOF ID",
 /* 135 */ "ifexpr ::= value INSTANCEOF value",
 /* 136 */ "ifcond ::= EQUALS",
 /* 137 */ "ifcond ::= NOTEQUALS",
 /* 138 */ "ifcond ::= GREATERTHAN",
 /* 139 */ "ifcond ::= LESSTHAN",
 /* 140 */ "ifcond ::= GREATEREQUAL",
 /* 141 */ "ifcond ::= LESSEQUAL",
 /* 142 */ "ifcond ::= IDENTITY",
 /* 143 */ "ifcond ::= NONEIDENTITY",
 /* 144 */ "ifcond ::= MOD",
 /* 145 */ "lop ::= LAND",
 /* 146 */ "lop ::= LOR",
 /* 147 */ "lop ::= LXOR",
 /* 148 */ "array ::= OPENB arrayelements CLOSEB",
 /* 149 */ "arrayelements ::= arrayelement",
 /* 150 */ "arrayelements ::= arrayelements COMMA arrayelement",
 /* 151 */ "arrayelements ::=",
 /* 152 */ "arrayelement ::= expr APTR expr",
 /* 153 */ "arrayelement ::= ID APTR expr",
 /* 154 */ "arrayelement ::= expr",
 /* 155 */ "doublequoted ::= doublequoted doublequotedcontent",
 /* 156 */ "doublequoted ::= doublequotedcontent",
 /* 157 */ "doublequotedcontent ::= BACKTICK ID BACKTICK",
 /* 158 */ "doublequotedcontent ::= BACKTICK variable BACKTICK",
 /* 159 */ "doublequotedcontent ::= DOLLAR ID",
 /* 160 */ "doublequotedcontent ::= LDEL expr RDEL",
 /* 161 */ "doublequotedcontent ::= LDEL smartytag RDEL",
 /* 162 */ "doublequotedcontent ::= DOLLAR OTHER",
 /* 163 */ "doublequotedcontent ::= LDEL OTHER",
 /* 164 */ "doublequotedcontent ::= BACKTICK OTHER",
 /* 165 */ "doublequotedcontent ::= OTHER",
 /* 166 */ "text ::= text textelement",
 /* 167 */ "text ::= textelement",
 /* 168 */ "textelement ::= OTHER",
 /* 169 */ "textelement ::= LDEL",
    );

    /**
     * This function returns the symbolic name associated with a token
     * value.
     * @param int
     * @return string
     */
    function tokenName($tokenType)
    {
        if ($tokenType === 0) {
            return 'End of Input';
        }
        if ($tokenType > 0 && $tokenType < count($this->yyTokenName)) {
            return $this->yyTokenName[$tokenType];
        } else {
            return "Unknown";
        }
    }

    /**
     * The following function deletes the value associated with a
     * symbol.  The symbol can be either a terminal or nonterminal.
     * @param int the symbol code
     * @param mixed the symbol's value
     */
    static function yy_destructor($yymajor, $yypminor)
    {
        switch ($yymajor) {
        /* Here is inserted the actions which take place when a
        ** terminal or non-terminal is destroyed.  This can happen
        ** when the symbol is popped from the stack during a
        ** reduce or during error processing or when a parser is 
        ** being destroyed before it is finished parsing.
        **
        ** Note: during a reduce, the only symbols destroyed are those
        ** which appear on the RHS of the rule, but which are not used
        ** inside the C code.
        */
            default:  break;   /* If no destructor action specified: do nothing */
        }
    }

    /**
     * Pop the parser's stack once.
     *
     * If there is a destructor routine associated with the token which
     * is popped from the stack, then call it.
     *
     * Return the major token number for the symbol popped.
     * @param TP_yyParser
     * @return int
     */
    function yy_pop_parser_stack()
    {
        if (!count($this->yystack)) {
            return;
        }
        $yytos = array_pop($this->yystack);
        if (self::$yyTraceFILE && $this->yyidx >= 0) {
            fwrite(self::$yyTraceFILE,
                self::$yyTracePrompt . 'Popping ' . $this->yyTokenName[$yytos->major] .
                    "\n");
        }
        $yymajor = $yytos->major;
        self::yy_destructor($yymajor, $yytos->minor);
        $this->yyidx--;
        return $yymajor;
    }

    /**
     * Deallocate and destroy a parser.  Destructors are all called for
     * all stack elements before shutting the parser down.
     */
    function __destruct()
    {
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        if (is_resource(self::$yyTraceFILE)) {
            fclose(self::$yyTraceFILE);
        }
    }

    /**
     * Based on the current state and parser stack, get a list of all
     * possible lookahead tokens
     * @param int
     * @return array
     */
    function yy_get_expected_tokens($token)
    {
        $state = $this->yystack[$this->yyidx]->stateno;
        $expected = self::$yyExpectedTokens[$state];
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return $expected;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return array_unique($expected);
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate])) {
                        $expected += self::$yyExpectedTokens[$nextstate];
                            if (in_array($token,
                                  self::$yyExpectedTokens[$nextstate], true)) {
                            $this->yyidx = $yyidx;
                            $this->yystack = $stack;
                            return array_unique($expected);
                        }
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return array_unique($expected);
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return $expected;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        return array_unique($expected);
    }

    /**
     * Based on the parser state and current parser stack, determine whether
     * the lookahead token is possible.
     * 
     * The parser will convert the token value to an error token if not.  This
     * catches some unusual edge cases where the parser would fail.
     * @param int
     * @return bool
     */
    function yy_is_expected_token($token)
    {
        if ($token === 0) {
            return true; // 0 is not part of this
        }
        $state = $this->yystack[$this->yyidx]->stateno;
        if (in_array($token, self::$yyExpectedTokens[$state], true)) {
            return true;
        }
        $stack = $this->yystack;
        $yyidx = $this->yyidx;
        do {
            $yyact = $this->yy_find_shift_action($token);
            if ($yyact >= self::YYNSTATE && $yyact < self::YYNSTATE + self::YYNRULE) {
                // reduce action
                $done = 0;
                do {
                    if ($done++ == 100) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // too much recursion prevents proper detection
                        // so give up
                        return true;
                    }
                    $yyruleno = $yyact - self::YYNSTATE;
                    $this->yyidx -= self::$yyRuleInfo[$yyruleno]['rhs'];
                    $nextstate = $this->yy_find_reduce_action(
                        $this->yystack[$this->yyidx]->stateno,
                        self::$yyRuleInfo[$yyruleno]['lhs']);
                    if (isset(self::$yyExpectedTokens[$nextstate]) &&
                          in_array($token, self::$yyExpectedTokens[$nextstate], true)) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        return true;
                    }
                    if ($nextstate < self::YYNSTATE) {
                        // we need to shift a non-terminal
                        $this->yyidx++;
                        $x = new TP_yyStackEntry;
                        $x->stateno = $nextstate;
                        $x->major = self::$yyRuleInfo[$yyruleno]['lhs'];
                        $this->yystack[$this->yyidx] = $x;
                        continue 2;
                    } elseif ($nextstate == self::YYNSTATE + self::YYNRULE + 1) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        if (!$token) {
                            // end of input: this is valid
                            return true;
                        }
                        // the last token was just ignored, we can't accept
                        // by ignoring input, this is in essence ignoring a
                        // syntax error!
                        return false;
                    } elseif ($nextstate === self::YY_NO_ACTION) {
                        $this->yyidx = $yyidx;
                        $this->yystack = $stack;
                        // input accepted, but not shifted (I guess)
                        return true;
                    } else {
                        $yyact = $nextstate;
                    }
                } while (true);
            }
            break;
        } while (true);
        $this->yyidx = $yyidx;
        $this->yystack = $stack;
        return true;
    }

    /**
     * Find the appropriate action for a parser given the terminal
     * look-ahead token iLookAhead.
     *
     * If the look-ahead token is YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return YY_NO_ACTION.
     * @param int The look-ahead token
     */
    function yy_find_shift_action($iLookAhead)
    {
        $stateno = $this->yystack[$this->yyidx]->stateno;
     
        /* if ($this->yyidx < 0) return self::YY_NO_ACTION;  */
        if (!isset(self::$yy_shift_ofst[$stateno])) {
            // no shift actions
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_shift_ofst[$stateno];
        if ($i === self::YY_SHIFT_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            if (count(self::$yyFallback) && $iLookAhead < count(self::$yyFallback)
                   && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) {
                if (self::$yyTraceFILE) {
                    fwrite(self::$yyTraceFILE, self::$yyTracePrompt . "FALLBACK " .
                        $this->yyTokenName[$iLookAhead] . " => " .
                        $this->yyTokenName[$iFallback] . "\n");
                }
                return $this->yy_find_shift_action($iFallback);
            }
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Find the appropriate action for a parser given the non-terminal
     * look-ahead token $iLookAhead.
     *
     * If the look-ahead token is self::YYNOCODE, then check to see if the action is
     * independent of the look-ahead.  If it is, return the action, otherwise
     * return self::YY_NO_ACTION.
     * @param int Current state number
     * @param int The look-ahead token
     */
    function yy_find_reduce_action($stateno, $iLookAhead)
    {
        /* $stateno = $this->yystack[$this->yyidx]->stateno; */

        if (!isset(self::$yy_reduce_ofst[$stateno])) {
            return self::$yy_default[$stateno];
        }
        $i = self::$yy_reduce_ofst[$stateno];
        if ($i == self::YY_REDUCE_USE_DFLT) {
            return self::$yy_default[$stateno];
        }
        if ($iLookAhead == self::YYNOCODE) {
            return self::YY_NO_ACTION;
        }
        $i += $iLookAhead;
        if ($i < 0 || $i >= self::YY_SZ_ACTTAB ||
              self::$yy_lookahead[$i] != $iLookAhead) {
            return self::$yy_default[$stateno];
        } else {
            return self::$yy_action[$i];
        }
    }

    /**
     * Perform a shift action.
     * @param int The new state to shift in
     * @param int The major token to shift in
     * @param mixed the minor token to shift in
     */
    function yy_shift($yyNewState, $yyMajor, $yypMinor)
    {
        $this->yyidx++;
        if ($this->yyidx >= self::YYSTACKDEPTH) {
            $this->yyidx--;
            if (self::$yyTraceFILE) {
                fprintf(self::$yyTraceFILE, "%sStack Overflow!\n", self::$yyTracePrompt);
            }
            while ($this->yyidx >= 0) {
                $this->yy_pop_parser_stack();
            }
            /* Here code is inserted which will execute if the parser
            ** stack ever overflows */
            return;
        }
        $yytos = new TP_yyStackEntry;
        $yytos->stateno = $yyNewState;
        $yytos->major = $yyMajor;
        $yytos->minor = $yypMinor;
        array_push($this->yystack, $yytos);
        if (self::$yyTraceFILE && $this->yyidx > 0) {
            fprintf(self::$yyTraceFILE, "%sShift %d\n", self::$yyTracePrompt,
                $yyNewState);
            fprintf(self::$yyTraceFILE, "%sStack:", self::$yyTracePrompt);
            for($i = 1; $i <= $this->yyidx; $i++) {
                fprintf(self::$yyTraceFILE, " %s",
                    $this->yyTokenName[$this->yystack[$i]->major]);
            }
            fwrite(self::$yyTraceFILE,"\n");
        }
    }

    /**
     * The following table contains information about every rule that
     * is used during the reduce.
     *
     * <pre>
     * array(
     *  array(
     *   int $lhs;         Symbol on the left-hand side of the rule
     *   int $nrhs;     Number of right-hand side symbols in the rule
     *  ),...
     * );
     * </pre>
     */
    static public $yyRuleInfo = array(
  array( 'lhs' => 72, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 1 ),
  array( 'lhs' => 73, 'rhs' => 2 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 3 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 74, 'rhs' => 1 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 77, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 4 ),
  array( 'lhs' => 75, 'rhs' => 4 ),
  array( 'lhs' => 75, 'rhs' => 2 ),
  array( 'lhs' => 75, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 4 ),
  array( 'lhs' => 75, 'rhs' => 4 ),
  array( 'lhs' => 75, 'rhs' => 3 ),
  array( 'lhs' => 75, 'rhs' => 3 ),
  array( 'lhs' => 75, 'rhs' => 9 ),
  array( 'lhs' => 90, 'rhs' => 2 ),
  array( 'lhs' => 90, 'rhs' => 1 ),
  array( 'lhs' => 75, 'rhs' => 6 ),
  array( 'lhs' => 75, 'rhs' => 6 ),
  array( 'lhs' => 76, 'rhs' => 2 ),
  array( 'lhs' => 76, 'rhs' => 4 ),
  array( 'lhs' => 76, 'rhs' => 3 ),
  array( 'lhs' => 80, 'rhs' => 2 ),
  array( 'lhs' => 80, 'rhs' => 1 ),
  array( 'lhs' => 80, 'rhs' => 0 ),
  array( 'lhs' => 93, 'rhs' => 4 ),
  array( 'lhs' => 93, 'rhs' => 4 ),
  array( 'lhs' => 93, 'rhs' => 4 ),
  array( 'lhs' => 93, 'rhs' => 2 ),
  array( 'lhs' => 88, 'rhs' => 1 ),
  array( 'lhs' => 88, 'rhs' => 3 ),
  array( 'lhs' => 87, 'rhs' => 4 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 1 ),
  array( 'lhs' => 81, 'rhs' => 4 ),
  array( 'lhs' => 81, 'rhs' => 3 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 94, 'rhs' => 2 ),
  array( 'lhs' => 94, 'rhs' => 3 ),
  array( 'lhs' => 94, 'rhs' => 1 ),
  array( 'lhs' => 82, 'rhs' => 7 ),
  array( 'lhs' => 82, 'rhs' => 7 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 95, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 2 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 1 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 2 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 2 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 7 ),
  array( 'lhs' => 91, 'rhs' => 4 ),
  array( 'lhs' => 91, 'rhs' => 8 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 91, 'rhs' => 5 ),
  array( 'lhs' => 91, 'rhs' => 6 ),
  array( 'lhs' => 91, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 4 ),
  array( 'lhs' => 79, 'rhs' => 1 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 79, 'rhs' => 3 ),
  array( 'lhs' => 83, 'rhs' => 3 ),
  array( 'lhs' => 101, 'rhs' => 2 ),
  array( 'lhs' => 101, 'rhs' => 0 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 103, 'rhs' => 4 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 5 ),
  array( 'lhs' => 103, 'rhs' => 3 ),
  array( 'lhs' => 103, 'rhs' => 2 ),
  array( 'lhs' => 89, 'rhs' => 1 ),
  array( 'lhs' => 89, 'rhs' => 2 ),
  array( 'lhs' => 104, 'rhs' => 1 ),
  array( 'lhs' => 104, 'rhs' => 3 ),
  array( 'lhs' => 102, 'rhs' => 2 ),
  array( 'lhs' => 100, 'rhs' => 1 ),
  array( 'lhs' => 100, 'rhs' => 2 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 3 ),
  array( 'lhs' => 105, 'rhs' => 5 ),
  array( 'lhs' => 105, 'rhs' => 6 ),
  array( 'lhs' => 105, 'rhs' => 2 ),
  array( 'lhs' => 96, 'rhs' => 4 ),
  array( 'lhs' => 98, 'rhs' => 4 ),
  array( 'lhs' => 99, 'rhs' => 3 ),
  array( 'lhs' => 99, 'rhs' => 1 ),
  array( 'lhs' => 99, 'rhs' => 0 ),
  array( 'lhs' => 84, 'rhs' => 3 ),
  array( 'lhs' => 84, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 2 ),
  array( 'lhs' => 85, 'rhs' => 0 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 106, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 1 ),
  array( 'lhs' => 86, 'rhs' => 2 ),
  array( 'lhs' => 86, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 1 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 2 ),
  array( 'lhs' => 107, 'rhs' => 2 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 2 ),
  array( 'lhs' => 107, 'rhs' => 2 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 107, 'rhs' => 3 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 108, 'rhs' => 1 ),
  array( 'lhs' => 109, 'rhs' => 1 ),
  array( 'lhs' => 109, 'rhs' => 1 ),
  array( 'lhs' => 109, 'rhs' => 1 ),
  array( 'lhs' => 92, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 1 ),
  array( 'lhs' => 110, 'rhs' => 3 ),
  array( 'lhs' => 110, 'rhs' => 0 ),
  array( 'lhs' => 111, 'rhs' => 3 ),
  array( 'lhs' => 111, 'rhs' => 3 ),
  array( 'lhs' => 111, 'rhs' => 1 ),
  array( 'lhs' => 97, 'rhs' => 2 ),
  array( 'lhs' => 97, 'rhs' => 1 ),
  array( 'lhs' => 112, 'rhs' => 3 ),
  array( 'lhs' => 112, 'rhs' => 3 ),
  array( 'lhs' => 112, 'rhs' => 2 ),
  array( 'lhs' => 112, 'rhs' => 3 ),
  array( 'lhs' => 112, 'rhs' => 3 ),
  array( 'lhs' => 112, 'rhs' => 2 ),
  array( 'lhs' => 112, 'rhs' => 2 ),
  array( 'lhs' => 112, 'rhs' => 2 ),
  array( 'lhs' => 112, 'rhs' => 1 ),
  array( 'lhs' => 78, 'rhs' => 2 ),
  array( 'lhs' => 78, 'rhs' => 1 ),
  array( 'lhs' => 113, 'rhs' => 1 ),
  array( 'lhs' => 113, 'rhs' => 1 ),
    );

    /**
     * The following table contains a mapping of reduce action to method name
     * that handles the reduction.
     * 
     * If a rule is not set, it has no handler.
     */
    static public $yyReduceMap = array(
        0 => 0,
        48 => 0,
        57 => 0,
        59 => 0,
        61 => 0,
        62 => 0,
        63 => 0,
        79 => 0,
        149 => 0,
        1 => 1,
        45 => 1,
        51 => 1,
        54 => 1,
        55 => 1,
        93 => 1,
        116 => 1,
        156 => 1,
        165 => 1,
        167 => 1,
        168 => 1,
        169 => 1,
        2 => 2,
        83 => 2,
        155 => 2,
        163 => 2,
        166 => 2,
        3 => 3,
        4 => 4,
        5 => 5,
        6 => 6,
        7 => 7,
        8 => 8,
        9 => 9,
        10 => 10,
        11 => 11,
        12 => 12,
        13 => 13,
        14 => 14,
        15 => 15,
        16 => 15,
        17 => 15,
        18 => 18,
        19 => 18,
        20 => 20,
        21 => 21,
        22 => 22,
        23 => 23,
        24 => 24,
        25 => 25,
        26 => 26,
        27 => 27,
        28 => 28,
        35 => 28,
        108 => 28,
        154 => 28,
        29 => 29,
        30 => 30,
        31 => 31,
        32 => 32,
        33 => 33,
        34 => 34,
        36 => 36,
        37 => 37,
        38 => 37,
        39 => 37,
        40 => 40,
        41 => 41,
        42 => 42,
        43 => 43,
        44 => 44,
        46 => 46,
        47 => 47,
        49 => 49,
        58 => 49,
        50 => 50,
        52 => 52,
        53 => 52,
        56 => 56,
        60 => 60,
        64 => 64,
        65 => 65,
        66 => 66,
        68 => 66,
        67 => 67,
        69 => 69,
        70 => 70,
        71 => 71,
        72 => 72,
        73 => 73,
        74 => 74,
        75 => 75,
        76 => 76,
        77 => 77,
        78 => 78,
        80 => 80,
        81 => 81,
        82 => 82,
        84 => 84,
        113 => 84,
        85 => 85,
        86 => 86,
        87 => 87,
        88 => 88,
        91 => 88,
        89 => 89,
        90 => 90,
        92 => 92,
        94 => 94,
        95 => 95,
        96 => 96,
        118 => 96,
        97 => 97,
        98 => 98,
        99 => 99,
        100 => 100,
        101 => 101,
        102 => 102,
        103 => 103,
        104 => 104,
        105 => 105,
        106 => 106,
        107 => 107,
        109 => 109,
        110 => 110,
        111 => 111,
        112 => 112,
        114 => 114,
        115 => 115,
        117 => 117,
        119 => 119,
        120 => 120,
        123 => 120,
        134 => 120,
        121 => 121,
        122 => 122,
        124 => 124,
        125 => 125,
        126 => 126,
        131 => 126,
        127 => 127,
        130 => 127,
        128 => 128,
        133 => 128,
        129 => 129,
        132 => 129,
        135 => 135,
        136 => 136,
        137 => 137,
        138 => 138,
        139 => 139,
        140 => 140,
        141 => 141,
        142 => 142,
        143 => 143,
        144 => 144,
        145 => 145,
        146 => 146,
        147 => 147,
        148 => 148,
        150 => 150,
        151 => 151,
        152 => 152,
        153 => 153,
        157 => 157,
        158 => 158,
        159 => 159,
        160 => 160,
        161 => 161,
        162 => 162,
        164 => 164,
    );
    /* Beginning here are the reduction cases.  A typical example
    ** follows:
    **  #line <lineno> <grammarfile>
    **   function yy_r0($yymsp){ ... }           // User supplied code
    **  #line <lineno> <thisfile>
    */
#line 79 "smarty_internal_templateparser.y"
    function yy_r0(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;     }
#line 1997 "smarty_internal_templateparser.php"
#line 85 "smarty_internal_templateparser.y"
    function yy_r1(){$this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;    }
#line 2000 "smarty_internal_templateparser.php"
#line 87 "smarty_internal_templateparser.y"
    function yy_r2(){$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2003 "smarty_internal_templateparser.php"
#line 93 "smarty_internal_templateparser.y"
    function yy_r3(){
                                          if ($this->compiler->has_code) {
                                            $tmp =''; foreach ($this->compiler->prefix_code as $code) {$tmp.=$code;} $this->compiler->prefix_code=array();
                                            $this->_retvalue = $this->cacher->processNocacheCode($tmp.$this->yystack[$this->yyidx + -1]->minor, $this->compiler,true);
                                         } else { $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;}  $this->compiler->has_variable_string = false;    }
#line 2010 "smarty_internal_templateparser.php"
#line 99 "smarty_internal_templateparser.y"
    function yy_r4(){ 
                                          if ($this->compiler->has_code) {
                                            $tmp =''; foreach ($this->compiler->prefix_code as $code) {$tmp.=$code;} $this->compiler->prefix_code=array();
                                            $this->_retvalue = $this->cacher->processNocacheCode($tmp.$this->yystack[$this->yyidx + -1]->minor, $this->compiler,true);
                                         } else { $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;} $this->compiler->has_variable_string = false;    }
#line 2017 "smarty_internal_templateparser.php"
#line 105 "smarty_internal_templateparser.y"
    function yy_r5(){
                                          if ($this->compiler->has_code) {
                                            $tmp =''; foreach ($this->compiler->prefix_code as $code) {$tmp.=$code;} $this->compiler->prefix_code=array();
                                            $this->_retvalue = $this->cacher->processNocacheCode($tmp.$this->yystack[$this->yyidx + -1]->minor, $this->compiler,true);
                                         } else { $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor;} $this->compiler->has_variable_string = false;    }
#line 2024 "smarty_internal_templateparser.php"
#line 111 "smarty_internal_templateparser.y"
    function yy_r6(){ $this->_retvalue = '';    }
#line 2027 "smarty_internal_templateparser.php"
#line 113 "smarty_internal_templateparser.y"
    function yy_r7(){ $this->_retvalue = $this->cacher->processNocacheCode($this->yystack[$this->yyidx + -1]->minor, $this->compiler,false);    }
#line 2030 "smarty_internal_templateparser.php"
#line 115 "smarty_internal_templateparser.y"
    function yy_r8(){$this->_retvalue = $this->cacher->processNocacheCode($this->smarty->left_delimiter, $this->compiler,false);    }
#line 2033 "smarty_internal_templateparser.php"
#line 117 "smarty_internal_templateparser.y"
    function yy_r9(){ $this->_retvalue = $this->cacher->processNocacheCode($this->smarty->right_delimiter, $this->compiler,false);    }
#line 2036 "smarty_internal_templateparser.php"
#line 119 "smarty_internal_templateparser.y"
    function yy_r10(){if ($this->sec_obj->php_handling == SMARTY_PHP_PASSTHRU) {
                                       $this->_retvalue = $this->cacher->processNocacheCode("<?php echo htmlspecialchars('<?php".str_replace("'","\'",$this->yystack[$this->yyidx + -1]->minor)."?>', ENT_QUOTES);?>\n", $this->compiler, false);
                                      } elseif ($this->sec_obj->php_handling == SMARTY_PHP_QUOTE) {
                                       $this->_retvalue = $this->cacher->processNocacheCode(htmlspecialchars('<?php'.$this->yystack[$this->yyidx + -1]->minor.'?>', ENT_QUOTES), $this->compiler, false);
                                      }elseif ($this->sec_obj->php_handling == SMARTY_PHP_ALLOW) {
                                       $this->_retvalue = $this->cacher->processNocacheCode('<?php'.$this->yystack[$this->yyidx + -1]->minor.'?>', $this->compiler, true);
                                      }elseif ($this->sec_obj->php_handling == SMARTY_PHP_REMOVE) {
                                       $this->_retvalue = '';
                                      }
                                         }
#line 2048 "smarty_internal_templateparser.php"
#line 130 "smarty_internal_templateparser.y"
    function yy_r11(){ 
                                      if ($this->sec_obj->php_handling == SMARTY_PHP_PASSTHRU || $this->sec_obj->php_handling == SMARTY_PHP_ALLOW) {
                                       $this->_retvalue = $this->cacher->processNocacheCode("<?php echo '<?=".$this->yystack[$this->yyidx + -1]->minor."?>'?>\n", $this->compiler, false);
                                      } elseif ($this->sec_obj->php_handling == SMARTY_PHP_QUOTE) {
                                       $this->_retvalue = $this->cacher->processNocacheCode(htmlspecialchars('<?='.$this->yystack[$this->yyidx + -1]->minor.'?>', ENT_QUOTES), $this->compiler, false);
                                      }elseif ($this->sec_obj == SMARTY_PHP_REMOVE) {
                                       $this->_retvalue = '';
                                      }
                                         }
#line 2059 "smarty_internal_templateparser.php"
#line 141 "smarty_internal_templateparser.y"
    function yy_r12(){ $this->compiler->tag_nocache = true; $this->_retvalue = $this->cacher->processNocacheCode("<?php echo '<?xml';?>", $this->compiler, true);    }
#line 2062 "smarty_internal_templateparser.php"
#line 142 "smarty_internal_templateparser.y"
    function yy_r13(){$this->compiler->tag_nocache = true; $this->_retvalue = $this->cacher->processNocacheCode("<?php echo '?>';?>\n", $this->compiler, true);    }
#line 2065 "smarty_internal_templateparser.php"
#line 145 "smarty_internal_templateparser.y"
    function yy_r14(){$this->_retvalue = $this->cacher->processNocacheCode($this->yystack[$this->yyidx + 0]->minor, $this->compiler,false);    }
#line 2068 "smarty_internal_templateparser.php"
#line 152 "smarty_internal_templateparser.y"
    function yy_r15(){ $this->_retvalue = $this->compiler->compileTag('print_expression',array_merge(array('value'=>$this->yystack[$this->yyidx + -1]->minor),$this->yystack[$this->yyidx + 0]->minor));    }
#line 2071 "smarty_internal_templateparser.php"
#line 162 "smarty_internal_templateparser.y"
    function yy_r18(){ $this->_retvalue = $this->compiler->compileTag('assign',array_merge(array('value'=>$this->yystack[$this->yyidx + -1]->minor),$this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + 0]->minor));    }
#line 2074 "smarty_internal_templateparser.php"
#line 165 "smarty_internal_templateparser.y"
    function yy_r20(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);    }
#line 2077 "smarty_internal_templateparser.php"
#line 166 "smarty_internal_templateparser.y"
    function yy_r21(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + 0]->minor,array());    }
#line 2080 "smarty_internal_templateparser.php"
#line 168 "smarty_internal_templateparser.y"
    function yy_r22(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor,array_merge(array('object_methode'=>$this->yystack[$this->yyidx + -1]->minor),$this->yystack[$this->yyidx + 0]->minor));    }
#line 2083 "smarty_internal_templateparser.php"
#line 170 "smarty_internal_templateparser.y"
    function yy_r23(){  $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor,$this->yystack[$this->yyidx + 0]->minor).'<?php echo ';
															                                   if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -2]->minor[0],'modifier')) {
                                                                      $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -2]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -1]->minor. "),".$this->yystack[$this->yyidx + -2]->minor[1].");?>";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -2]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -2]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -2]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -1]->minor. "),".$this->yystack[$this->yyidx + -2]->minor[1].");?>";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -2]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                        }
#line 2098 "smarty_internal_templateparser.php"
#line 184 "smarty_internal_templateparser.y"
    function yy_r24(){if (!in_array($this->yystack[$this->yyidx + -2]->minor,array('if','elseif','while'))) {
                                                            $this->compiler->trigger_template_error ("wrong syntax for tag \"" . $this->yystack[$this->yyidx + -2]->minor . "\""); 
                                                            }
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,array('if condition'=>$this->yystack[$this->yyidx + 0]->minor));    }
#line 2104 "smarty_internal_templateparser.php"
#line 188 "smarty_internal_templateparser.y"
    function yy_r25(){ if (!in_array($this->yystack[$this->yyidx + -2]->minor,array('if','elseif','while'))) {
                                                            $this->compiler->trigger_template_error ("wrong syntax for tag \"" . $this->yystack[$this->yyidx + -2]->minor . "\""); 
                                                            }
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor,array('if condition'=>$this->yystack[$this->yyidx + 0]->minor));    }
#line 2110 "smarty_internal_templateparser.php"
#line 193 "smarty_internal_templateparser.y"
    function yy_r26(){
                                                            if ($this->yystack[$this->yyidx + -8]->minor != 'for') {
                                                               $this->compiler->trigger_template_error ("wrong syntax for tag \"" . $this->yystack[$this->yyidx + -8]->minor . "\""); 
                                                            }
                                                             $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -8]->minor,array('start'=>$this->yystack[$this->yyidx + -6]->minor,'ifexp'=>$this->yystack[$this->yyidx + -4]->minor,'varloop'=>$this->yystack[$this->yyidx + -1]->minor,'loop'=>$this->yystack[$this->yyidx + 0]->minor));    }
#line 2117 "smarty_internal_templateparser.php"
#line 198 "smarty_internal_templateparser.y"
    function yy_r27(){ $this->_retvalue = '='.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2120 "smarty_internal_templateparser.php"
#line 199 "smarty_internal_templateparser.y"
    function yy_r28(){ $this->_retvalue = $this->yystack[$this->yyidx + 0]->minor;    }
#line 2123 "smarty_internal_templateparser.php"
#line 201 "smarty_internal_templateparser.y"
    function yy_r29(){
                                                            if ($this->yystack[$this->yyidx + -5]->minor != 'foreach') {
                                                               $this->compiler->trigger_template_error ("wrong syntax for tag \"" . $this->yystack[$this->yyidx + -5]->minor . "\""); 
                                                            }
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -5]->minor,array('from'=>$this->yystack[$this->yyidx + -3]->minor,'item'=>$this->yystack[$this->yyidx + 0]->minor));    }
#line 2130 "smarty_internal_templateparser.php"
#line 206 "smarty_internal_templateparser.y"
    function yy_r30(){ 
                                                            if ($this->yystack[$this->yyidx + -5]->minor != 'foreach') {
                                                               $this->compiler->trigger_template_error ("wrong syntax for tag \"" . $this->yystack[$this->yyidx + -5]->minor . "\""); 
                                                            }
                                                            $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -5]->minor,array('from'=>$this->yystack[$this->yyidx + -3]->minor,'item'=>$this->yystack[$this->yyidx + 0]->minor));    }
#line 2137 "smarty_internal_templateparser.php"
#line 213 "smarty_internal_templateparser.y"
    function yy_r31(){ $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -1]->minor.'close',$this->yystack[$this->yyidx + 0]->minor);    }
#line 2140 "smarty_internal_templateparser.php"
#line 214 "smarty_internal_templateparser.y"
    function yy_r32(){  $this->_retvalue = '<?php ob_start();?>'.$this->compiler->compileTag($this->yystack[$this->yyidx + -3]->minor.'close',$this->yystack[$this->yyidx + 0]->minor).'<?php echo ';
															                                   if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -2]->minor[0],'modifier')) {
                                                                      $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -2]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -1]->minor. "),".$this->yystack[$this->yyidx + -2]->minor[1].");?>";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -2]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -2]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue .= "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -2]->minor[0] . "',array(ob_get_clean()" . $this->yystack[$this->yyidx + -1]->minor. "),".$this->yystack[$this->yyidx + -2]->minor[1].");?>";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -2]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                        }
#line 2155 "smarty_internal_templateparser.php"
#line 228 "smarty_internal_templateparser.y"
    function yy_r33(){  $this->_retvalue = $this->compiler->compileTag($this->yystack[$this->yyidx + -2]->minor.'close',array('object_methode'=>$this->yystack[$this->yyidx + 0]->minor));    }
#line 2158 "smarty_internal_templateparser.php"
#line 235 "smarty_internal_templateparser.y"
    function yy_r34(){ $this->_retvalue = array_merge($this->yystack[$this->yyidx + -1]->minor,$this->yystack[$this->yyidx + 0]->minor);    }
#line 2161 "smarty_internal_templateparser.php"
#line 239 "smarty_internal_templateparser.y"
    function yy_r36(){ $this->_retvalue = array();    }
#line 2164 "smarty_internal_templateparser.php"
#line 242 "smarty_internal_templateparser.y"
    function yy_r37(){ $this->_retvalue = array($this->yystack[$this->yyidx + -2]->minor=>$this->yystack[$this->yyidx + 0]->minor);    }
#line 2167 "smarty_internal_templateparser.php"
#line 245 "smarty_internal_templateparser.y"
    function yy_r40(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor=>'true');    }
#line 2170 "smarty_internal_templateparser.php"
#line 251 "smarty_internal_templateparser.y"
    function yy_r41(){ $this->_retvalue = array($this->yystack[$this->yyidx + 0]->minor);    }
#line 2173 "smarty_internal_templateparser.php"
#line 252 "smarty_internal_templateparser.y"
    function yy_r42(){ $this->yystack[$this->yyidx + -2]->minor[]=$this->yystack[$this->yyidx + 0]->minor; $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor;    }
#line 2176 "smarty_internal_templateparser.php"
#line 254 "smarty_internal_templateparser.y"
    function yy_r43(){ $this->_retvalue = array('var' => $this->yystack[$this->yyidx + -2]->minor, 'value'=>$this->yystack[$this->yyidx + 0]->minor);    }
#line 2179 "smarty_internal_templateparser.php"
#line 260 "smarty_internal_templateparser.y"
    function yy_r44(){ $this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';     }
#line 2182 "smarty_internal_templateparser.php"
#line 263 "smarty_internal_templateparser.y"
    function yy_r46(){$this->_retvalue = '$_smarty_tpl->getStreamVariable(\''. $this->yystack[$this->yyidx + -2]->minor .'://'. $this->yystack[$this->yyidx + 0]->minor . '\')';    }
#line 2185 "smarty_internal_templateparser.php"
#line 264 "smarty_internal_templateparser.y"
    function yy_r47(){            
                                                            if ($this->smarty->plugin_handler->loadSmartyPlugin($this->yystack[$this->yyidx + -1]->minor[0],'modifier')) {
                                                                      $this->_retvalue = "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -1]->minor[0] . "',array(". $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + 0]->minor. "),".$this->yystack[$this->yyidx + -1]->minor[1].")";
                                                                 } else {
                                                                   if (is_callable($this->yystack[$this->yyidx + -1]->minor[0])) {
																					                            if (!$this->template->security || $this->smarty->security_handler->isTrustedModifier($this->yystack[$this->yyidx + -1]->minor[0], $this->compiler)) {
                                                                         $this->_retvalue = "\$_smarty_tpl->smarty->plugin_handler->executeModifier('".$this->yystack[$this->yyidx + -1]->minor[0] . "',array(". $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + 0]->minor. "),".$this->yystack[$this->yyidx + -1]->minor[1].")";
																					                            }
																					                         } else {
                                                                      $this->compiler->trigger_template_error ("unknown modifier \"" . $this->yystack[$this->yyidx + -1]->minor[0] . "\"");
                                                                 }
                                                              }
                                                                }
#line 2200 "smarty_internal_templateparser.php"
#line 281 "smarty_internal_templateparser.y"
    function yy_r49(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2203 "smarty_internal_templateparser.php"
#line 283 "smarty_internal_templateparser.y"
    function yy_r50(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor . $this->yystack[$this->yyidx + -1]->minor . $this->yystack[$this->yyidx + 0]->minor;     }
#line 2206 "smarty_internal_templateparser.php"
#line 290 "smarty_internal_templateparser.y"
    function yy_r52(){ $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.' ? '.$this->yystack[$this->yyidx + -2]->minor.' : '.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2209 "smarty_internal_templateparser.php"
#line 304 "smarty_internal_templateparser.y"
    function yy_r56(){$this->_retvalue = ' & ';    }
#line 2212 "smarty_internal_templateparser.php"
#line 311 "smarty_internal_templateparser.y"
    function yy_r60(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2215 "smarty_internal_templateparser.php"
#line 319 "smarty_internal_templateparser.y"
    function yy_r64(){ $this->_retvalue = "(". $this->yystack[$this->yyidx + -1]->minor .")";     }
#line 2218 "smarty_internal_templateparser.php"
#line 321 "smarty_internal_templateparser.y"
    function yy_r65(){ $this->_retvalue = "'".$this->yystack[$this->yyidx + -1]->minor."'";     }
#line 2221 "smarty_internal_templateparser.php"
#line 322 "smarty_internal_templateparser.y"
    function yy_r66(){ $this->_retvalue = "''";     }
#line 2224 "smarty_internal_templateparser.php"
#line 324 "smarty_internal_templateparser.y"
    function yy_r67(){ $this->_retvalue = '"'.$this->yystack[$this->yyidx + -1]->minor.'"';     }
#line 2227 "smarty_internal_templateparser.php"
#line 327 "smarty_internal_templateparser.y"
    function yy_r69(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'::'.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2230 "smarty_internal_templateparser.php"
#line 328 "smarty_internal_templateparser.y"
    function yy_r70(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'=$_smarty_tpl->getVariable(\''. $this->yystack[$this->yyidx + -3]->minor .'\')->value;?>'; $this->_retvalue = $this->yystack[$this->yyidx + -6]->minor.'::$_tmp'.$this->prefix_number.'('. $this->yystack[$this->yyidx + -1]->minor .')';     }
#line 2233 "smarty_internal_templateparser.php"
#line 330 "smarty_internal_templateparser.y"
    function yy_r71(){ $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor.'::'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2236 "smarty_internal_templateparser.php"
#line 331 "smarty_internal_templateparser.y"
    function yy_r72(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'=$_smarty_tpl->getVariable(\''. $this->yystack[$this->yyidx + -4]->minor .'\')->value;?>'; $this->_retvalue = $this->yystack[$this->yyidx + -7]->minor.'::$_tmp'.$this->prefix_number.'('. $this->yystack[$this->yyidx + -2]->minor .')'.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2239 "smarty_internal_templateparser.php"
#line 333 "smarty_internal_templateparser.y"
    function yy_r73(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'::'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2242 "smarty_internal_templateparser.php"
#line 335 "smarty_internal_templateparser.y"
    function yy_r74(){ $this->_retvalue = $this->yystack[$this->yyidx + -4]->minor.'::$'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2245 "smarty_internal_templateparser.php"
#line 337 "smarty_internal_templateparser.y"
    function yy_r75(){ $this->_retvalue = $this->yystack[$this->yyidx + -5]->minor.'::$'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2248 "smarty_internal_templateparser.php"
#line 339 "smarty_internal_templateparser.y"
    function yy_r76(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php ob_start();?>'.$this->yystack[$this->yyidx + -1]->minor.'<?php $_tmp'.$this->prefix_number.'=ob_get_clean();?>'; $this->_retvalue = '$_tmp'.$this->prefix_number;     }
#line 2251 "smarty_internal_templateparser.php"
#line 348 "smarty_internal_templateparser.y"
    function yy_r77(){if ($this->yystack[$this->yyidx + 0]->minor['var'] == '\'smarty\'') { $this->_retvalue =  $this->compiler->compileTag('special_smarty_variable',$this->yystack[$this->yyidx + 0]->minor['index']);} else {
                                                         $this->_retvalue = '$_smarty_tpl->getVariable('. $this->yystack[$this->yyidx + 0]->minor['var'] .')->value'.$this->yystack[$this->yyidx + 0]->minor['index']; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + 0]->minor['var'],"'"))->nocache;}    }
#line 2255 "smarty_internal_templateparser.php"
#line 351 "smarty_internal_templateparser.y"
    function yy_r78(){ $this->_retvalue = '$_smarty_tpl->getVariable('. $this->yystack[$this->yyidx + -2]->minor .')->'.$this->yystack[$this->yyidx + 0]->minor; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + -2]->minor,"'"))->nocache;    }
#line 2258 "smarty_internal_templateparser.php"
#line 355 "smarty_internal_templateparser.y"
    function yy_r80(){$this->_retvalue = '$_smarty_tpl->getConfigVariable(\''. $this->yystack[$this->yyidx + -1]->minor .'\')';    }
#line 2261 "smarty_internal_templateparser.php"
#line 356 "smarty_internal_templateparser.y"
    function yy_r81(){$this->_retvalue = '$_smarty_tpl->getConfigVariable('. $this->yystack[$this->yyidx + -1]->minor .')';    }
#line 2264 "smarty_internal_templateparser.php"
#line 359 "smarty_internal_templateparser.y"
    function yy_r82(){$this->_retvalue = array('var'=>$this->yystack[$this->yyidx + -1]->minor, 'index'=>$this->yystack[$this->yyidx + 0]->minor);    }
#line 2267 "smarty_internal_templateparser.php"
#line 367 "smarty_internal_templateparser.y"
    function yy_r84(){return;    }
#line 2270 "smarty_internal_templateparser.php"
#line 371 "smarty_internal_templateparser.y"
    function yy_r85(){ $this->_retvalue = "['". $this->yystack[$this->yyidx + 0]->minor ."']";    }
#line 2273 "smarty_internal_templateparser.php"
#line 372 "smarty_internal_templateparser.y"
    function yy_r86(){ $this->_retvalue = "[". $this->yystack[$this->yyidx + 0]->minor ."]";    }
#line 2276 "smarty_internal_templateparser.php"
#line 373 "smarty_internal_templateparser.y"
    function yy_r87(){ $this->_retvalue = "[".$this->yystack[$this->yyidx + 0]->minor."]";    }
#line 2279 "smarty_internal_templateparser.php"
#line 374 "smarty_internal_templateparser.y"
    function yy_r88(){ $this->_retvalue = "[". $this->yystack[$this->yyidx + -1]->minor ."]";    }
#line 2282 "smarty_internal_templateparser.php"
#line 376 "smarty_internal_templateparser.y"
    function yy_r89(){ $this->_retvalue = '['.$this->compiler->compileTag('special_smarty_variable','[\'section\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\'][\'index\']').']';    }
#line 2285 "smarty_internal_templateparser.php"
#line 377 "smarty_internal_templateparser.y"
    function yy_r90(){ $this->_retvalue = '['.$this->compiler->compileTag('special_smarty_variable','[\'section\'][\''.$this->yystack[$this->yyidx + -3]->minor.'\'][\''.$this->yystack[$this->yyidx + -1]->minor.'\']').']';    }
#line 2288 "smarty_internal_templateparser.php"
#line 381 "smarty_internal_templateparser.y"
    function yy_r92(){$this->_retvalue = '';    }
#line 2291 "smarty_internal_templateparser.php"
#line 389 "smarty_internal_templateparser.y"
    function yy_r94(){$this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.'.'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2294 "smarty_internal_templateparser.php"
#line 391 "smarty_internal_templateparser.y"
    function yy_r95(){$this->_retvalue = '\''.$this->yystack[$this->yyidx + 0]->minor.'\'';    }
#line 2297 "smarty_internal_templateparser.php"
#line 393 "smarty_internal_templateparser.y"
    function yy_r96(){$this->_retvalue = '('.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2300 "smarty_internal_templateparser.php"
#line 398 "smarty_internal_templateparser.y"
    function yy_r97(){ if ($this->yystack[$this->yyidx + -1]->minor['var'] == '\'smarty\'') { $this->_retvalue =  $this->compiler->compileTag('internal_smarty_var',$this->yystack[$this->yyidx + -1]->minor['index']).$this->yystack[$this->yyidx + 0]->minor;} else {
                                                         $this->_retvalue = '$_smarty_tpl->getVariable('. $this->yystack[$this->yyidx + -1]->minor['var'] .')->value'.$this->yystack[$this->yyidx + -1]->minor['index'].$this->yystack[$this->yyidx + 0]->minor; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + -1]->minor['var'],"'"))->nocache;}    }
#line 2304 "smarty_internal_templateparser.php"
#line 401 "smarty_internal_templateparser.y"
    function yy_r98(){$this->_retvalue  = $this->yystack[$this->yyidx + 0]->minor;     }
#line 2307 "smarty_internal_templateparser.php"
#line 403 "smarty_internal_templateparser.y"
    function yy_r99(){$this->_retvalue  = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2310 "smarty_internal_templateparser.php"
#line 405 "smarty_internal_templateparser.y"
    function yy_r100(){ $this->_retvalue = '->'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2313 "smarty_internal_templateparser.php"
#line 406 "smarty_internal_templateparser.y"
    function yy_r101(){ $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';    }
#line 2316 "smarty_internal_templateparser.php"
#line 407 "smarty_internal_templateparser.y"
    function yy_r102(){ $this->_retvalue = '->{'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';    }
#line 2319 "smarty_internal_templateparser.php"
#line 408 "smarty_internal_templateparser.y"
    function yy_r103(){ $this->_retvalue = '->{\''.$this->yystack[$this->yyidx + -4]->minor.'\'.'.$this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + 0]->minor.'}';    }
#line 2322 "smarty_internal_templateparser.php"
#line 410 "smarty_internal_templateparser.y"
    function yy_r104(){ $this->_retvalue = '->'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2325 "smarty_internal_templateparser.php"
#line 416 "smarty_internal_templateparser.y"
    function yy_r105(){if (!$this->template->security || $this->smarty->security_handler->isTrustedPhpFunction($this->yystack[$this->yyidx + -3]->minor, $this->compiler)) {
																					            if ($this->yystack[$this->yyidx + -3]->minor == 'isset' || $this->yystack[$this->yyidx + -3]->minor == 'empty' || $this->yystack[$this->yyidx + -3]->minor == 'array' || is_callable($this->yystack[$this->yyidx + -3]->minor)) {
																					                $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $this->yystack[$this->yyidx + -1]->minor .")";
																					            } else {
                                                       $this->compiler->trigger_template_error ("unknown function \"" . $this->yystack[$this->yyidx + -3]->minor . "\"");
                                                      }
                                                    }    }
#line 2334 "smarty_internal_templateparser.php"
#line 427 "smarty_internal_templateparser.y"
    function yy_r106(){ $this->_retvalue = $this->yystack[$this->yyidx + -3]->minor . "(". $this->yystack[$this->yyidx + -1]->minor .")";    }
#line 2337 "smarty_internal_templateparser.php"
#line 431 "smarty_internal_templateparser.y"
    function yy_r107(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.",".$this->yystack[$this->yyidx + 0]->minor;    }
#line 2340 "smarty_internal_templateparser.php"
#line 435 "smarty_internal_templateparser.y"
    function yy_r109(){ return;    }
#line 2343 "smarty_internal_templateparser.php"
#line 440 "smarty_internal_templateparser.y"
    function yy_r110(){ $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor,'false');    }
#line 2346 "smarty_internal_templateparser.php"
#line 441 "smarty_internal_templateparser.y"
    function yy_r111(){ $this->_retvalue =  array($this->yystack[$this->yyidx + 0]->minor,'true');    }
#line 2349 "smarty_internal_templateparser.php"
#line 453 "smarty_internal_templateparser.y"
    function yy_r112(){ $this->_retvalue = $this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2352 "smarty_internal_templateparser.php"
#line 457 "smarty_internal_templateparser.y"
    function yy_r114(){$this->_retvalue = ','.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2355 "smarty_internal_templateparser.php"
#line 458 "smarty_internal_templateparser.y"
    function yy_r115(){$this->_retvalue = ',\''.$this->yystack[$this->yyidx + 0]->minor.'\'';    }
#line 2358 "smarty_internal_templateparser.php"
#line 465 "smarty_internal_templateparser.y"
    function yy_r117(){$this->_retvalue = '!'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2361 "smarty_internal_templateparser.php"
#line 470 "smarty_internal_templateparser.y"
    function yy_r119(){$this->_retvalue =$this->yystack[$this->yyidx + 0]->minor;    }
#line 2364 "smarty_internal_templateparser.php"
#line 472 "smarty_internal_templateparser.y"
    function yy_r120(){$this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2367 "smarty_internal_templateparser.php"
#line 473 "smarty_internal_templateparser.y"
    function yy_r121(){$this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2370 "smarty_internal_templateparser.php"
#line 474 "smarty_internal_templateparser.y"
    function yy_r122(){$this->_retvalue = 'in_array('.$this->yystack[$this->yyidx + -2]->minor.',(array)'.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2373 "smarty_internal_templateparser.php"
#line 476 "smarty_internal_templateparser.y"
    function yy_r124(){$this->_retvalue = '!('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2376 "smarty_internal_templateparser.php"
#line 477 "smarty_internal_templateparser.y"
    function yy_r125(){$this->_retvalue = '('.$this->yystack[$this->yyidx + -2]->minor.' % '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2379 "smarty_internal_templateparser.php"
#line 478 "smarty_internal_templateparser.y"
    function yy_r126(){$this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2382 "smarty_internal_templateparser.php"
#line 479 "smarty_internal_templateparser.y"
    function yy_r127(){$this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2385 "smarty_internal_templateparser.php"
#line 480 "smarty_internal_templateparser.y"
    function yy_r128(){$this->_retvalue = '!(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2388 "smarty_internal_templateparser.php"
#line 481 "smarty_internal_templateparser.y"
    function yy_r129(){$this->_retvalue = '(1 & '.$this->yystack[$this->yyidx + -2]->minor.' / '.$this->yystack[$this->yyidx + 0]->minor.')';    }
#line 2391 "smarty_internal_templateparser.php"
#line 487 "smarty_internal_templateparser.y"
    function yy_r135(){$this->prefix_number++; $this->compiler->prefix_code[] = '<?php $_tmp'.$this->prefix_number.'='.$this->yystack[$this->yyidx + 0]->minor.';?>'; $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.$this->yystack[$this->yyidx + -1]->minor.'$_tmp'.$this->prefix_number;    }
#line 2394 "smarty_internal_templateparser.php"
#line 489 "smarty_internal_templateparser.y"
    function yy_r136(){$this->_retvalue = '==';    }
#line 2397 "smarty_internal_templateparser.php"
#line 490 "smarty_internal_templateparser.y"
    function yy_r137(){$this->_retvalue = '!=';    }
#line 2400 "smarty_internal_templateparser.php"
#line 491 "smarty_internal_templateparser.y"
    function yy_r138(){$this->_retvalue = '>';    }
#line 2403 "smarty_internal_templateparser.php"
#line 492 "smarty_internal_templateparser.y"
    function yy_r139(){$this->_retvalue = '<';    }
#line 2406 "smarty_internal_templateparser.php"
#line 493 "smarty_internal_templateparser.y"
    function yy_r140(){$this->_retvalue = '>=';    }
#line 2409 "smarty_internal_templateparser.php"
#line 494 "smarty_internal_templateparser.y"
    function yy_r141(){$this->_retvalue = '<=';    }
#line 2412 "smarty_internal_templateparser.php"
#line 495 "smarty_internal_templateparser.y"
    function yy_r142(){$this->_retvalue = '===';    }
#line 2415 "smarty_internal_templateparser.php"
#line 496 "smarty_internal_templateparser.y"
    function yy_r143(){$this->_retvalue = '!==';    }
#line 2418 "smarty_internal_templateparser.php"
#line 497 "smarty_internal_templateparser.y"
    function yy_r144(){$this->_retvalue = '%';    }
#line 2421 "smarty_internal_templateparser.php"
#line 499 "smarty_internal_templateparser.y"
    function yy_r145(){$this->_retvalue = '&&';    }
#line 2424 "smarty_internal_templateparser.php"
#line 500 "smarty_internal_templateparser.y"
    function yy_r146(){$this->_retvalue = '||';    }
#line 2427 "smarty_internal_templateparser.php"
#line 501 "smarty_internal_templateparser.y"
    function yy_r147(){$this->_retvalue = ' XOR ';    }
#line 2430 "smarty_internal_templateparser.php"
#line 506 "smarty_internal_templateparser.y"
    function yy_r148(){ $this->_retvalue = 'array('.$this->yystack[$this->yyidx + -1]->minor.')';    }
#line 2433 "smarty_internal_templateparser.php"
#line 508 "smarty_internal_templateparser.y"
    function yy_r150(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.','.$this->yystack[$this->yyidx + 0]->minor;     }
#line 2436 "smarty_internal_templateparser.php"
#line 509 "smarty_internal_templateparser.y"
    function yy_r151(){ return;     }
#line 2439 "smarty_internal_templateparser.php"
#line 510 "smarty_internal_templateparser.y"
    function yy_r152(){ $this->_retvalue = $this->yystack[$this->yyidx + -2]->minor.'=>'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2442 "smarty_internal_templateparser.php"
#line 511 "smarty_internal_templateparser.y"
    function yy_r153(){ $this->_retvalue = '\''.$this->yystack[$this->yyidx + -2]->minor.'\'=>'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2445 "smarty_internal_templateparser.php"
#line 520 "smarty_internal_templateparser.y"
    function yy_r157(){$this->_retvalue = "`".$this->yystack[$this->yyidx + -1]->minor."`";    }
#line 2448 "smarty_internal_templateparser.php"
#line 521 "smarty_internal_templateparser.y"
    function yy_r158(){$this->_retvalue = '".'.$this->yystack[$this->yyidx + -1]->minor.'."'; $this->compiler->has_variable_string = true;    }
#line 2451 "smarty_internal_templateparser.php"
#line 522 "smarty_internal_templateparser.y"
    function yy_r159(){$this->_retvalue = '".'.'$_smarty_tpl->getVariable(\''. $this->yystack[$this->yyidx + 0]->minor .'\')->value'.'."'; $this->compiler->tag_nocache=$this->compiler->tag_nocache|$this->template->getVariable(trim($this->yystack[$this->yyidx + 0]->minor,"'"))->nocache; $this->compiler->has_variable_string = true;    }
#line 2454 "smarty_internal_templateparser.php"
#line 523 "smarty_internal_templateparser.y"
    function yy_r160(){ $this->_retvalue = '".('.$this->yystack[$this->yyidx + -1]->minor.')."'; $this->compiler->has_variable_string = true;    }
#line 2457 "smarty_internal_templateparser.php"
#line 524 "smarty_internal_templateparser.y"
    function yy_r161(){ $this->prefix_number++; $this->compiler->prefix_code[] = '<?php ob_start();?>'.$this->yystack[$this->yyidx + -1]->minor.'<?php $_tmp'.$this->prefix_number.'=ob_get_clean();?>'; $this->_retvalue = '".$_tmp'.$this->prefix_number.'."'; $this->compiler->has_variable_string = true;    }
#line 2460 "smarty_internal_templateparser.php"
#line 525 "smarty_internal_templateparser.y"
    function yy_r162(){$this->_retvalue = '$'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2463 "smarty_internal_templateparser.php"
#line 527 "smarty_internal_templateparser.y"
    function yy_r164(){$this->_retvalue = '`'.$this->yystack[$this->yyidx + 0]->minor;    }
#line 2466 "smarty_internal_templateparser.php"

    /**
     * placeholder for the left hand side in a reduce operation.
     * 
     * For a parser with a rule like this:
     * <pre>
     * rule(A) ::= B. { A = 1; }
     * </pre>
     * 
     * The parser will translate to something like:
     * 
     * <code>
     * function yy_r0(){$this->_retvalue = 1;}
     * </code>
     */
    private $_retvalue;

    /**
     * Perform a reduce action and the shift that must immediately
     * follow the reduce.
     * 
     * For a rule such as:
     * 
     * <pre>
     * A ::= B blah C. { dosomething(); }
     * </pre>
     * 
     * This function will first call the action, if any, ("dosomething();" in our
     * example), and then it will pop three states from the stack,
     * one for each entry on the right-hand side of the expression
     * (B, blah, and C in our example rule), and then push the result of the action
     * back on to the stack with the resulting state reduced to (as described in the .out
     * file)
     * @param int Number of the rule by which to reduce
     */
    function yy_reduce($yyruleno)
    {
        //int $yygoto;                     /* The next state */
        //int $yyact;                      /* The next action */
        //mixed $yygotominor;        /* The LHS of the rule reduced */
        //TP_yyStackEntry $yymsp;            /* The top of the parser's stack */
        //int $yysize;                     /* Amount to pop the stack */
        $yymsp = $this->yystack[$this->yyidx];
        if (self::$yyTraceFILE && $yyruleno >= 0 
              && $yyruleno < count(self::$yyRuleName)) {
            fprintf(self::$yyTraceFILE, "%sReduce (%d) [%s].\n",
                self::$yyTracePrompt, $yyruleno,
                self::$yyRuleName[$yyruleno]);
        }

        $this->_retvalue = $yy_lefthand_side = null;
        if (array_key_exists($yyruleno, self::$yyReduceMap)) {
            // call the action
            $this->_retvalue = null;
            $this->{'yy_r' . self::$yyReduceMap[$yyruleno]}();
            $yy_lefthand_side = $this->_retvalue;
        }
        $yygoto = self::$yyRuleInfo[$yyruleno]['lhs'];
        $yysize = self::$yyRuleInfo[$yyruleno]['rhs'];
        $this->yyidx -= $yysize;
        for($i = $yysize; $i; $i--) {
            // pop all of the right-hand side parameters
            array_pop($this->yystack);
        }
        $yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, $yygoto);
        if ($yyact < self::YYNSTATE) {
            /* If we are not debugging and the reduce action popped at least
            ** one element off the stack, then we can push the new element back
            ** onto the stack here, and skip the stack overflow test in yy_shift().
            ** That gives a significant speed improvement. */
            if (!self::$yyTraceFILE && $yysize) {
                $this->yyidx++;
                $x = new TP_yyStackEntry;
                $x->stateno = $yyact;
                $x->major = $yygoto;
                $x->minor = $yy_lefthand_side;
                $this->yystack[$this->yyidx] = $x;
            } else {
                $this->yy_shift($yyact, $yygoto, $yy_lefthand_side);
            }
        } elseif ($yyact == self::YYNSTATE + self::YYNRULE + 1) {
            $this->yy_accept();
        }
    }

    /**
     * The following code executes when the parse fails
     * 
     * Code from %parse_fail is inserted here
     */
    function yy_parse_failed()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sFail!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser fails */
    }

    /**
     * The following code executes when a syntax error first occurs.
     * 
     * %syntax_error code is inserted here
     * @param int The major type of the error token
     * @param mixed The minor type of the error token
     */
    function yy_syntax_error($yymajor, $TOKEN)
    {
#line 60 "smarty_internal_templateparser.y"

    $this->internalError = true;
    $this->yymajor = $yymajor;
    $this->compiler->trigger_template_error();
#line 2584 "smarty_internal_templateparser.php"
    }

    /**
     * The following is executed when the parser accepts
     * 
     * %parse_accept code is inserted here
     */
    function yy_accept()
    {
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sAccept!\n", self::$yyTracePrompt);
        }
        while ($this->yyidx >= 0) {
            $stack = $this->yy_pop_parser_stack();
        }
        /* Here code is inserted which will be executed whenever the
        ** parser accepts */
#line 52 "smarty_internal_templateparser.y"

    $this->successful = !$this->internalError;
    $this->internalError = false;
    $this->retvalue = $this->_retvalue;
    //echo $this->retvalue."\n\n";
#line 2609 "smarty_internal_templateparser.php"
    }

    /**
     * The main parser program.
     * 
     * The first argument is the major token number.  The second is
     * the token value string as scanned from the input.
     *
     * @param int the token number
     * @param mixed the token value
     * @param mixed any extra arguments that should be passed to handlers
     */
    function doParse($yymajor, $yytokenvalue)
    {
//        $yyact;            /* The parser action. */
//        $yyendofinput;     /* True if we are at the end of input */
        $yyerrorhit = 0;   /* True if yymajor has invoked an error */
        
        /* (re)initialize the parser, if necessary */
        if ($this->yyidx === null || $this->yyidx < 0) {
            /* if ($yymajor == 0) return; // not sure why this was here... */
            $this->yyidx = 0;
            $this->yyerrcnt = -1;
            $x = new TP_yyStackEntry;
            $x->stateno = 0;
            $x->major = 0;
            $this->yystack = array();
            array_push($this->yystack, $x);
        }
        $yyendofinput = ($yymajor==0);
        
        if (self::$yyTraceFILE) {
            fprintf(self::$yyTraceFILE, "%sInput %s\n",
                self::$yyTracePrompt, $this->yyTokenName[$yymajor]);
        }
        
        do {
            $yyact = $this->yy_find_shift_action($yymajor);
            if ($yymajor < self::YYERRORSYMBOL &&
                  !$this->yy_is_expected_token($yymajor)) {
                // force a syntax error
                $yyact = self::YY_ERROR_ACTION;
            }
            if ($yyact < self::YYNSTATE) {
                $this->yy_shift($yyact, $yymajor, $yytokenvalue);
                $this->yyerrcnt--;
                if ($yyendofinput && $this->yyidx >= 0) {
                    $yymajor = 0;
                } else {
                    $yymajor = self::YYNOCODE;
                }
            } elseif ($yyact < self::YYNSTATE + self::YYNRULE) {
                $this->yy_reduce($yyact - self::YYNSTATE);
            } elseif ($yyact == self::YY_ERROR_ACTION) {
                if (self::$yyTraceFILE) {
                    fprintf(self::$yyTraceFILE, "%sSyntax Error!\n",
                        self::$yyTracePrompt);
                }
                if (self::YYERRORSYMBOL) {
                    /* A syntax error has occurred.
                    ** The response to an error depends upon whether or not the
                    ** grammar defines an error token "ERROR".  
                    **
                    ** This is what we do if the grammar does define ERROR:
                    **
                    **  * Call the %syntax_error function.
                    **
                    **  * Begin popping the stack until we enter a state where
                    **    it is legal to shift the error symbol, then shift
                    **    the error symbol.
                    **
                    **  * Set the error count to three.
                    **
                    **  * Begin accepting and shifting new tokens.  No new error
                    **    processing will occur until three tokens have been
                    **    shifted successfully.
                    **
                    */
                    if ($this->yyerrcnt < 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $yymx = $this->yystack[$this->yyidx]->major;
                    if ($yymx == self::YYERRORSYMBOL || $yyerrorhit ){
                        if (self::$yyTraceFILE) {
                            fprintf(self::$yyTraceFILE, "%sDiscard input token %s\n",
                                self::$yyTracePrompt, $this->yyTokenName[$yymajor]);
                        }
                        $this->yy_destructor($yymajor, $yytokenvalue);
                        $yymajor = self::YYNOCODE;
                    } else {
                        while ($this->yyidx >= 0 &&
                                 $yymx != self::YYERRORSYMBOL &&
        ($yyact = $this->yy_find_shift_action(self::YYERRORSYMBOL)) >= self::YYNSTATE
                              ){
                            $this->yy_pop_parser_stack();
                        }
                        if ($this->yyidx < 0 || $yymajor==0) {
                            $this->yy_destructor($yymajor, $yytokenvalue);
                            $this->yy_parse_failed();
                            $yymajor = self::YYNOCODE;
                        } elseif ($yymx != self::YYERRORSYMBOL) {
                            $u2 = 0;
                            $this->yy_shift($yyact, self::YYERRORSYMBOL, $u2);
                        }
                    }
                    $this->yyerrcnt = 3;
                    $yyerrorhit = 1;
                } else {
                    /* YYERRORSYMBOL is not defined */
                    /* This is what we do if the grammar does not define ERROR:
                    **
                    **  * Report an error message, and throw away the input token.
                    **
                    **  * If the input token is $, then fail the parse.
                    **
                    ** As before, subsequent error messages are suppressed until
                    ** three input tokens have been successfully shifted.
                    */
                    if ($this->yyerrcnt <= 0) {
                        $this->yy_syntax_error($yymajor, $yytokenvalue);
                    }
                    $this->yyerrcnt = 3;
                    $this->yy_destructor($yymajor, $yytokenvalue);
                    if ($yyendofinput) {
                        $this->yy_parse_failed();
                    }
                    $yymajor = self::YYNOCODE;
                }
            } else {
                $this->yy_accept();
                $yymajor = self::YYNOCODE;
            }            
        } while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
    }
}
